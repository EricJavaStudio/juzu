So far we seen a basic view controller, in this section we will study more in depth view controllers. A view
controller is invoked by Juzu when the application needs to be rendered, which can happen anytime during the lifecycle
of an application.

This version has still the ##index()## view controller, but now it has also an overloaded ##index(String location)##
method that accept a ##location## argument as a view parameter.

{{java}}
{@include examples.tutorial.weather4.Weather#index(java.lang.String)}
{{/java}}

The ##@Route("/show/{location}")## annotation binds the the ##index## controller method to the ///show/*// route.
Since our our application package is annotated with the ##@Route("/weather4")## annotation, an URL like
///weather4/show/marseille// invokes this controller method with the //marseille// location.

View parameters are bound to the current navigation of the application and their value are managed by the framework.
At this point it is normal to wonder how a view parameter value can change. Let's have a closer look at the
##index.gtmpl## application template.

{{code href=examples/tutorial/weather4/templates/index.gtmpl/}}

The template now has two links changing view parameters when they are processed. Such links are created by a
special syntax that references the view method, for instance the script fragment ##@{index(location = 'paris')}##
generates an url that updates the ##location## view parameter to the ##paris## value when it is processed.

The initial controller method ##index()## is still there but now it simply invokes the ##index(String location)##
controller with a predefined value.

{{java}}
{@include examples.tutorial.weather4.Weather#index()}
{{/java}}

We could't close this section without talking a bit about **safe urls**. Juzu is deeply integrated at the heart of the
Java compiler and performs many checks to detect applications bugs during the application compilation. Among those
checks, templates are validated and the url syntax ##@{ }## is checked against the application controllers. In fact
Juzu will resolve an url syntax until it finds one controller that resolves the specified name and parameters. If not
Juzu will make the compilation fail and give detailled information about the error. This kind of feature makes Juzu really
unique among all other web frameworks, we will see some other later.

{{note}}Juzu leverages the [[Annotation Processing Tool>>http://download.oracle.com/javase/6/docs/technotes/guides/apt/index.html]]
(APT) facility standardized since Java 6. APT works with any Java compiler and is not specific to a build system or IDE,
it just works anywhere, we will see later that it even works with Eclipse incremental compiler.{{/note}}