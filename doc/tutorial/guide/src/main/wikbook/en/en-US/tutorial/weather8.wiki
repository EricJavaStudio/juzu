Now that our application look great, we are going to add a final touch to our application and make it more dynamic.

In the previous section we introduced the accordion user interface component, but it was used in a static way. In this
section we will make it dynamic and introduce the Ajax plugin.

The accordion component can be combined to the JQuery collapse plugin providing the capability to unfold an item to
display the weather of the location. When the item is unfolded an ajax request is performed to the application to
retrieve the markup that will be inserted.

= Javascript to the rescue =

The application will use several Javascript libraries:

* The JQuery library provides the fundations for building our application
* The Bootstrap accordion component provides scripts as a JQuery plugin
* Juzu provides Ajax helpers as a JQuery plugin
* A small custom script to setup the accordion plugin with the ajax plugin

== Adding scripts ==

The Asset plugin was introduced in the previous section to handle the serving of the Bootstrap stylesheets. The ##@Asset##
annotation can be used also for embedding scripts, but it provides more control about the script, in particular
a dependency mechanism to control the order of scripts that we will use: indeed JQuery plugins have to be loaded after the
JQuery library is loaded.

We extend the ##@Asset## annotation to add our scripts:

{{java}}
@Assets({
  @Asset(
    id = "jquery", // <1>
    value = "jquery-1.7.1.min.js",
    location = AssetLocation.CLASSPATH),
  @Asset(
    id = "transition",
    value = "bootstrap-transition.js", // <2>
    location = AssetLocation.CLASSPATH,
    depends = "jquery"), // <1>
  @Asset(
    id = "collapse",
    value = "bootstrap-collapse.js",
    location = AssetLocation.CLASSPATH,
    depends = {
      "jquery", // 1
      "transition"}), // <2>
  @Asset(
    value = "weather.js",
    location = AssetLocation.CLASSPATH,
    depends = {
      "jquery",  // <1>
      "collapse"}), // <3>
  @Asset(value = "/examples/tutorial/assets/bootstrap.css", location = AssetLocation.CLASSPATH)
})
package examples.tutorial.weather8;
// =1= All other scripts than JQuery depends on JQuery
// =2= The //collapse// JQuery plugin depends on the //transition// script
// =3= Our //weather// script depends also on the JQuery //collapse// plugin
{{/java}}

The declaration is straightforward, any ##@Asset## annotation may configure

* an optional ##id## used for creating dependencies between script assets
* a mandatory ##value## for the script name
* an optional ##location## for resolving the script
* an optional ##depends## that declares the ids a script depends on

== The collapse plugin ==

The Bootstrap collapse plugin allows the user to unfold a city to display its weather, you can see how it works
in the [[Bootstrap manual>>http://twitter.github.com/bootstrap/javascript.html#collapse]]. In our case we modify
the ##index.gtmpl## to use it, in particular the ##accordion-group## part:

{{code}}
<div class="accordion-group">
  <div class="accordion-heading">
    <a class="accordion-toggle" href="#${current}" data-parent="${id}" data-toggle="collapse">${current}</a>
  </div>
  <% def expanded = i != index ? 'in' : ''; %>
  <div id="${current}" class="accordion-body collapse ${expanded}">
    <div class="accordion-inner">
    </div>
  </div>
</div>
{{/code}}

There are two noticeable points to explain:

* The ##accordion-inner## is empty now, the reason is that the weather will be loaded using JQuery ajax capabilities
* The ##div.collapse## element id is set to the current item location, this value will be reused during an ajax
interaction, we will see more about this later.

= Bridge the gap with Ajax =

Now our application loads a set of dynamic tabs managed by JQuery and the collapse plugin, it's time to develop the ajax
part: our goal is to load a markup fragment to insert in an accordion item when it is unfolded. We will develop a bit
of client side Javascript and a resource controller on the Weather controller.

== Resource controller ==

We need a controller method to server the markup of the weather of a particular city. Until now we have studied view
and action controllers, for this use case we will use a new type of controller : the //resource// controller.

Resource controllers are pretty much like a view controllers except that they must produce the entire response sent to the
client and that is precisely what we want to achieve on the server side.

Our application requires a single resource controller method that we will call ##getFragment##, it will render a markup
fragment for a specific city location:

{{java}}
{@include examples.tutorial.weather8.Weather#fragment}

{@include examples.tutorial.weather8.Weather#getFragment(java.lang.String)}
{{/java}}

The fragment template is very simple and only renders the portion of the screen that will be updated by the client
side javascript code when an item is unfolded:

{{code language=java href="examples/tutorial/weather8/templates/fragment.gtmpl"/}}

== JQuery ==

The last part of our application is the javascript part that will react on the collapse plugin component to load
the markup from the ##getFragment## controller when the item is unfolded. We create the javascript file ##weather.js##
in the ##examples.tutorial.weather8.assets##:

{{code language=java href="examples/tutorial/weather8/assets/weather.js"/}}

The following construct is important because it ensures that the code inside the function will be executed
 when JQuery is loaded:

{{code}}
$(function() {
  //
});
{{/code}}

If you take time to read the collapse plugin component [[documentation>>http://twitter.github.com/bootstrap/javascript.html#collapse]]
you will see that there are two important things to do for integrating it in our application:

* We must setup an event listener on ##.collapse## elements to react to the ##shown## event
* The collapase component is setup with the ##$(".collapse").collapse()## code

The important code is inside the ##show## event listener:

* The location to display is extracted from the element ##id## on the ##div.collapse## component
* We find the appropriate element to update with the ##$(this).closest(".accordion-group").find(".accordion-inner")## selectors
* On the ##.accordion-inner## element we invoke the resource controller with the ##jzLoad(...)## function

The ##jzLoad## function is a JQuery plugin provided by the Juzu ajax plugin. It allows to invoke a controller method using
 ajax and cares about propagating the call to the resource controller method. It replaces the standard JQuery ##load## function
 and accepts the same argument. However the url part is replaced by a controller method, ##Weather.getFragment()## in our case.

The Juzu ajax plugin takes care of finding the right URL for invoking the controller method. It is designed to work in a
standalone javascript file without requiring ##<script>## tags in the page and works even when multiples instances of the
portlets are on the same page.

When the ajax plugin operates on ##@Ajax## controller method, it wraps the markup with a DOM structure that contains the
URL for the ##@Ajax## method of the application:

{{code}}
<div class="jz">
  <div data-method-id="Weather.getFragment()" data-url="http://localhost:8080/....."/>
  ...
</div>
{{/code}}

The ##jzLoad## function is invoked on a portion of the DOM that is wrapped by the ##div.jz## element and this
function will simply locate the correct URL using the ##data-method-id## attribute. This makes the same script
work with different portlets on the same page.

Note also that in our code we never used any JQuery selector containing id in order to allow several instances of the
same application to work without conflicts.

