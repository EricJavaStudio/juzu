The last chapter of our tutorial will teach you how to test a Juzu application. Juzu applications can be tested
using existing tools, we will use in this chapter the following tools:

* [[JUnit 4>>http://www.junit.org]]
* [[Arquillian>>http://arquillian.org]] : a framework for managing web containers
* [[ShrinkWrap>>http://www.jboss.org/shrinkwrap]]: Arquillian's little brother for creating Java archives easily
* [[Selenium WebDriver>>http://seleniumhq.org/docs/03_webdriver.html]] : a simple API for simulating browser behavior

For making testing easy, Juzu provides a  Maven dependencies containing all the required dependencies for
testing an application:

{{xml}}
<dependency>
  <groupId>junit</groupId>
  <artifactId>junit</artifactId>
  <scope>test</scope>
</dependency>
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-bom-arquillian</artifactId>
  <scope>test</scope>
</dependency>
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-bom-arquillian-tomcat7</artifactId>
  <scope>test</scope>
</dependency>
{{/xml}}

The //juzu-bom-arquillian// and //juzu-bom-arquillian-tomcat7// provides setup for Arquillian and Selenium for Tomcat7
based testing.

= Setting up the test =

Let's start by setting up our test class with Arquillian, the goal is to run the Weather application during the
test. We will rely on the [[Tomcat>>http://tomcat.apache.org]] servlet container for running our application and
on the Arquillian framework for starting and stopping Tomcat. Arquillian provides a JUnit runner for managing
a web container during a unit test:

{{example title="Using the Arquillian runner"}}
{{java}}
@RunWith(Arquillian.class)
public class WeatherTestCase {
}
{{/java}}
{{/example}}

{{note}}Arquillian supports also the TestNG framework{{/note}}

This only setup Tomcat during the test, we need to deploy the Weather application and for this we use Arquillian
 ##@Deployment## annotation and we return a ShrinkWrap ##WebArchive## object that will be deployed in Tomcat
by Arquillian. ##WebArchive## are easy to build programmatically, however we will use an helper provided by Juzu
to build the base archive:

{{example title="Application deployment"}}
{{java}}
{@include examples.tutorial.WeatherServletTestCase#deployment}
{{/java}}
{{/example}}

For testing our application we will use Selenium WebDriver managed by Arquillian. Arquillian can inject WebDriver
thanks to the //Drone// extension and it is quite easy to achieve. We also need the base URL of the Weather
application after it is deployed:

{{example title="Arquillian injection"}}
{{java}}
{@include examples.tutorial.WeatherTestCase#driver}

{@include examples.tutorial.WeatherTestCase#deploymentURL}
{{/java}}
{{/example}}

The last step of the setup is a little helper method for creating application URL for our applications
//weather1//, //weather2//, ...

{{example title="Creating URL for an application"}}
{{java}}
{@include examples.tutorial.WeatherServletTestCase#getApplicationURL(java.lang.String)}
{{/java}}
{{/example}}

This method simply generates an URL based on the application name, for example ##getApplicationURL("weather1")## returns
 the URL for the //weather1// application.

= Testing the app =

Now that our test class is done we can write a few tests for the application:

{{example title="Creating URL for an application"}}
{{java}}
{@include examples.tutorial.WeatherTestCase#testWeather1()}
{{/java}}
{{/example}}



