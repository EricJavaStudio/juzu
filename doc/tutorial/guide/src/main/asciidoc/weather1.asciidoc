== Deploy the applications

Before diving in the technical part of this tutorial, we need to study how to deploy the examples and how to use them.
In the package you downloaded you will find a war file adapted to your portal server in the +/tutorial+ directory:

* +juzu-tutorial-examples-tomcat.war+ for the Tomcat server
* +juzu-tutorial-examples-gatein.war+ for the GateIn portal server
* +juzu-tutorial-examples-liferay.war+ for the Liferay portal server

NOTE: In Tomcat server the application is executed as a Servlet whereas in GateIn or Liferay, the application is
executed as a Portlet.

The main reason we have several servers is that the jars are not exactly the same, each is adapted to the
server you will use. When you deploy the applications, the deployment process will print information in the
console, similar to:

----
INFO: Deploying web application archive juzu-tutorial-tomcat.war
[Weather1Portlet] Using injection CDI_WELD
[Weather1Portlet] Building application
[Weather1Portlet] Starting Weather1Application
[Weather2Portlet] Using injection CDI_WELD
[Weather2Portlet] Building application
[Weather2Portlet] Starting Weather2Application
[Weather3Portlet] Using injection INJECT_SPRING
[Weather3Portlet] Building application
[Weather3Portlet] Starting Weather3Application
....
----

As we can notice, there are 8 applications deployed, one for each of the topic of this tutorial

* Weather1Application: <<quickstart>>
* Weather2Application: <<template_overview>>
* Weather3Application: <<dependency_injection>>
* Weather4Application: <<views>>
* Weather5Application: <<actions>>
* Weather6Application: <<type_safe_templating>>
* Weather7Application: <<styled>>
* Weather8Application: <<ajax>>

== Interacting with the application

The first version of the application shows the most basic Juzu application. Our application is declared in the
+examples.tutorial.weather1+ package package annotated with the +@Application+ annotation This annotation declares
a Juzu application and does not require any mandatory value. Like classes, methods or fields, Java packages can be
annotated, such packages declaration are represented by a special file named +package-info.java+.

The first thing to do when developping a Juzu application is to declare the application. The package of the application
must be annotated with the +@juzu.Application+ annotation to declare the application. The Java file
_examples/tutorial/weather1/package-info.java_ contains the package declaration along with the annotation:

[source,java]
----
@Application
@Route("/weather1")
@Portlet
package examples.tutorial.weather1;
----

Along with the +@Application+ annotation there are two other annotations +@Route+ and +@Portlet+:

* The +@Route+ annotation defines the route of the application when the application is used as a servlet. It binds
the application to the _/weather1_ path.
* The +@Portlet+ annotation generates a portlet application class used by the portlet container

Both annotations are not coupled, you can use either the +@Route+ or the +@Portlet+ annotation, or both
 if you want tod deploy your application in both runtimes.

This is enough to create an empty Juzu application, now let's see the application itself!

Usually an application is made of controllers and templates, in this example, the +Weather+ Java class contains a method
annotated with the +@View+ annotation, which turns the +Weather+ class into a Juzu controller. The controller method
+index()+ is the name of the default method that Juzu will call.

[source,java]
----
include::{sourcesdir}/examples/tutorial/weather1/Weather.java[tags=classdef]
----

Methods annotated by +@View+ have the unique purpose of providing markup, they are called _views_. In our case,
the method delegates the rendering to the +index.gtmpl+ template. The template is injected in the controller thanks
to the +@Inject+ annotation and the +@Path("index.gtmpl")+ annotation.

By default templates are located in the +templates+ package of the application, in our case the
+examples.tutorial.weather1.templates+ package. The +@Path+ annotation specifies the path of the template in this
package. The templates are located in the same source tree than the java classes because the files must be available
for the Java compiler.

The last step of this section is to explain how to package the application, let's see how to do that.

=== Packaging the application in Tomcat

There are two servlets used for serving the application:

* The +JuzuServlet+ serves the Juzu applications contained in the war file
* The +AssetServlet+ serves the asset of the applications such as stylesheets or JavaScript

By default we don't need to provide a _web.xml_ descriptor since, the +JuzuServet+ is generated thanks to the
_servlet_ plugin and the +AssetServlet+ is registered by Juzu dynamically.

=== Packaging the application for the GateIn portal

Our application is annotated with the +juzu.plugin.portlet.Portlet+ annotation. The +@Portlet+ annotation
generates a Java class +examples.tutorial.weather1.Weather1Portlet+ that we specifies in the _WEB-INF/portlet.xml_
deployment descriptor of the web application:

[source,xml]
----
<portlet>
  <portlet-name>Weather1Portlet</portlet-name>
  <portlet-class>examples.tutorial.weather1.Weather1Portlet</portlet-class>
</portlet>
----
