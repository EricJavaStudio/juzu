This chapter dives into the template life cycle from the compilation time to the run time. We will describe the
template Service Provider Interface (SPI), the SPI is designed to make Juzu templating extensible and integrating
template engines in Juzu. This chapter is optional is you are only writing ab application with Juzu, however it is
a must read if you want to know more Juzu internals or if you want to understand how to integrate a
template engine in Juzu.

When a Juzu application is compiled, the Juzu annotation processor detects the +@Path+ annotations and triggers
the compilation of the related templates. The template compilation can be split in two parts:

* Generating the template companion class that inherits the +juzu.template.Template+ class. This part is generic
 and works with any templating system, it is entirely managed by Juzu.
* Processing the template file, this task is delegated to the +TemplateProvider+ interface and is extensible.
The provider allows to have several templating system in Juzu and decouples the template compilation process
from the details of the templating engine.

== Compiling a Groovy template

Let's study an example with the Groovy template at compilation time.

.Compiling a Groovy template
image::images/templatespi/lifecycle1.png[Life cycle,700,align="center"]

When the Java compiler is invoked, the following steps are executed

. The Java compiler triggers the Juzu annotation processor when it finds the +@Path+ annotation
. Juzu resolves the relative path to the +templates+ package of the application
.. When the template cannot be resolved a compilation error is triggered
.. Otherwise the template is loaded
. The template provider is looked up according to the file name extension, it generates the _index_.groovy_ source file
. Juzu creates the +index+ class that extends the +juzu.template.Template+ class annotated by the +@Path("index.gtmpl")+ annotation

After that the only remaining part is to compile the _index_.groovy_ source to a class. It can be achieved either at build time
using the _groovyc_ compiler or at load time when the +index+ template is loaded using a +GroovyClassLoader+. The former
approach makes the build a bit more complex (but not much as Groovy compilation is fairly well supported in build systems or IDEs)
as it requires to run a Groovy compilation but it will perform additional validation of the template as well as reduce the load
time of the template. The later approach will detect any compilation error (such as Groovy syntax error) at runtime
and the _index_.groovy_ compilation will take a few milliseconds.

This flexibility allows to use the lazy approach during development and when the application is released then the Groovy compiler
can be used to compile the _index_.groovy_.

== Type safe URL resolution

Groovy templates provides the +@{...}+ syntax for generating URL from the application controllers. This section gives
an overview of the underlying resolution mechanism.

.Template URL resolution during compilation
image::images/templatespi/lifecycle2.png[URL resolution,750,align="center"]

* Parse: the template is parsed into its model representation
* Resolve: the +index+ link is resolved againt the controller meta model
* Validate: the +index+ link is validated
* Emit: the corresponding _index_.groovy_ file is emitted and save on the class output
* Compile: the Groovy source is compiled into a class by the _groovyc_ compiler (this part is done after _javac_)

== Template Service Provider Interface

Juzu provides a Service Provider Interface (SPI) for integrating thirdparty template engine. Actually all template
system are integrated with the SPI. We will study briefly the integration points so you can integrate a template engine
of your choice in Juzu.

=== Template providers

The +juzu.impl.template.spi.TemplateProvider+ is the main entry point when a templating system is integrated. The
provider is triggered during the compilation phase by the APT system built into the Java compiler.

[source,java]
----
public abstract class TemplateProvider<M extends Serializable> {
  ...
}
----

The provider must declare the template model +<M>+ generic type, this type must be a serializable as Juzu will sometimes
write template models on the disk during the compilation. This usually happens only in Eclipse due its incremental
compiler architecture. The type specified by the provider is privately managed (i.e it is opaque for Juzu) and it
symbolizes an internal representation of the parsed source (usually an Abstract Syntax Tree), it will be used in
various methods of the provider.

Let's have a review of the methods of this class to have a better understanding.

[source,java]
----
include::{sourcesdir}/juzu/impl/template/spi/TemplateProvider.java[tags=getSourceExtension]
----

The +getSourceExtension()+ method is used to determine what file extension the provider can compile. The implementation
 should return a constant value, for instance the Groovy provide simply returns the +gtmpl+ value.

[source,java]
----
include::{sourcesdir}/juzu/impl/template/spi/TemplateProvider.java[tags=parse]

include::{sourcesdir}/juzu/impl/template/spi/TemplateProvider.java[tags=process]

include::{sourcesdir}/juzu/impl/template/spi/TemplateProvider.java[tags=emit]
----

The +parse+, +process+ and +emit+ methods care about transforming the template source to its final representation:
the compiled template.

* The +parse+ method is invoked with the content of the template and returns a template model. The representation returned
by the parse method is a parsed representation of the template source. If a parsing error occurs the method can throw
a +TemplateException+.
* The +process+ method is invoked after the template is parsed with the necessary context for performing further
processing of the template, for instance the Groovy templating engine performs the resolution of type safe URLs or type
safe parameters declaration at this moment. During the process:
** The provider can resolve other templates using the +ProcessContext+, if the template to resolve is not
  yet loaded it will trigger the +parse+/+process+/+emit+ lifecycle, it if was already processed the template
  is simply returned
** The implementation can resolve controller methods and translate them into method invocation, this is used for
  checking type safe URL and translating them into controller companion invocation
** The +juzu.impl.template.spi.TemplateModel+ argument models the template, it has several fields such as the underlying
model or the template path
** The implementation can declare type safe parameters using the +TemplateModel#addParameter(String)+ method. The declared
parameters will be generated on the +juzu.template.Template+ subclass
* The +emit+ method is invoked when the template processing is over. The +EmitContext+ interface can be used
to create resources during this round.

[source,java]
----
include::{sourcesdir}/juzu/impl/template/spi/TemplateProvider.java[tags=getTemplateStubType]
----

Finally the +getTemplateStubType()+ returns the type of a java class that will be used for creating a template stub.
For each template, a stub is created, the stub is responsible for loading the template at runtime, i.e the original
template or the compiled template that may have been generated during compilation during the +emit+ callback.

=== Template stub

Template stubs are java classes created by Juzu for managing a template at runtime on behalf of the provider.
Each provider provides its own stub implementation as a +juzu.impl.template.spi.TemplateStub+ subclass.

A stub must provide a public constructor accepting a +java.lang.String+ argument: the template id. The template
 id if the class name of the generated template. In addition, a stub must implement two abstract methods:

[source,java]
----
include::{sourcesdir}/juzu/impl/template/spi/TemplateStub.java[tags=doInit]

include::{sourcesdir}/juzu/impl/template/spi/TemplateStub.java[tags=doRender]
----

The +doInit+ method loads the template using the provided +ClassLoader+, it will be call only once before the
template is rendered. Usually it uses the template id provided during the construction of the template to
locate the template on the disk, in its original form or in its compiled form.

The +doRender+ method renders the template using the provided +TemplateRenderContext+. The render context
provides the necessary hooks such as:

* Producing markup
* Setting the title
* Obtaining the locale
* Accessing parameters or application beans for resolving expressions

== Template at work

After having described the various pieces of the templating SPI, let's look at how the template generated stubs
 are used by Juzu templating system at runtime.

When the controller declares the _index.gtmpl_ template the compiler produces three artifacts
* the +index+ class template inherits +juzu.template.Template+: it is the only class visible from the
controller and the whole application
* the _index_.groovy_ Groovy template is the effective template code: it produces the markup, resolve expressions, etc...

.index groovy at work
image::images/request/interaction3.png[At work,250,align="center"]

When a controller is instantiated, the +index+ template instance is injected into the controller, the +@Path+ annotation
plays an essential role because it's a qualifier and that qualifier is used to distinguish the correct subclass to inject
in the controller.

When the template is created, the corresponding template stub is instantiated. When the template needs to be
rendered, the +doInit(ClassLoader)+ method of the stub is invoked. At this moment the Groovy +index_+ class is
loaded from the  class loader, when the class is not found, the _index_.groovy_ is loaded and it is compiled
on the fly.

== Qualified template class

Controller can be injected with the +juzu.template.Template+ class, however they can also be injected with
the template subclass that was genereted by Juzu: instead of using the qualified template injection,
the controller declares the template _index_ subclass. This approach cab be used when type safe parameters
are used as only the +index+ type declares the fluent API.

For instance if the _index.gtmpl_ declares the _color_ parameter the +index+ class will look like:

[source,java]
----
@Path("index.gtmpl")
public class index extends Template {

  ...

  public index with() {
    return new index.Builder();
  }

  public class Builder extends Template.Builder {

    public Builder color(String color) {
      // Generated code
    }
  }
}
----

The controller can then use the fluent API:

[source,java]
----
public class Controller {

  @Inject
  @Path("index.gtmpl")
  Template index;

  @View
  public Response.Content index() {
    return index.with().color("red").ok();
  }
}
----
