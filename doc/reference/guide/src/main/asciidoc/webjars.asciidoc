== Juzu WebJars Plugin

http://www.webjars.org/[WebJars] are client-side web libraries (e.g. jQuery & Bootstrap) packaged into jar files.
WebJars allow to declaratively set the version, use a consistent version across an application, and easily deal with transitive dependencies.

Juzu provides a WebJars plugin that copies resources in jar libraries to application assets and then served by the _Asset_
plugin or the _AMD_ plugin.


=== Usage

.Annotating an application package for declaring WebJars
[source,java]
----
@Application
@WebJars(@WebJar("foo"))
package myapp;

import juzu.Application;
import juzu.plugin.webjars.WebJars;
----

[source,xml]
----
<dependency>
  <groupId>org.webjars</groupId>
  <artifactId>foo</artifactId>
  <version>1.0</version>
</dependency>
----

The plugin will copy the content of the _foo_ webjar to the application +assets+ directory, they will be available as
any other asset. For this example _foo.js_ file will be located in the +myapp.assets+ package.

If we want this file to be served with the application we simply add the corresponding +@Assets+ annotation:

.WebJars and Asset plugin in action
[source,java]
----
@Application
@WebJars(@WebJar("foo"))
@Assets(@Asset("foo.js"))
package myapp;

import juzu.Application;
import juzu.plugin.asset.Assets;
import juzu.plugin.asset.Script;
import juzu.plugin.webjars.WebJars;
----

It can also be used as a JavaScript module with the _AMD_ plugin:

.WebJars and AMD plugin in action
[source,java]
----
@Application
@WebJars(@WebJar("foo"))
@Defines({
  @Define(
    name = "Foo", 
    path="foo.js"
  ),
  @Define(
    name = "Bar", 
    path="bar.js",
    dependencies = {@Dependency(name = "Foo")}
  )
})  
package myapp;

import juzu.Application;
import juzu.plugin.amd.Define;
import juzu.plugin.amd.Defines;
import juzu.plugin.amd.Dependency;
import juzu.plugin.webjars.WebJars;
----

You don't need to specify the WebJar version because the WebJars plugin will find it automatically (by examining the Maven
metadata stored in the jar). However some jars have files that don't correspond to the WebJar version (usually patch
releases), in that case you can specify the version to help the plugin find the files:

[source,xml]
----
<dependency>
	  <groupId>org.webjars</groupId>
	  <artifactId>angular-ui-bootstrap</artifactId>
	  <version>0.7.0-1</version>
</dependency>
----

For this particular version _0.7.0-1_ the effective version to use it _0.7.0_. This can be achieved by examining the
 jar:

----
> cd .m2/repository/org/webjars/angular-ui-bootstrap/0.7.0-1/
> jar -tvf angular-ui-bootstrap-0.7.0-1.jar
     0 Fri Dec 06 08:50:36 CET 2013 META-INF/
   125 Fri Dec 06 08:50:34 CET 2013 META-INF/MANIFEST.MF
     0 Fri Dec 06 08:50:30 CET 2013 META-INF/resources/
     0 Fri Dec 06 08:50:30 CET 2013 META-INF/resources/webjars/
     0 Fri Dec 06 08:50:30 CET 2013 META-INF/resources/webjars/angular-ui-bootstrap/
     0 Fri Dec 06 08:50:34 CET 2013 META-INF/resources/webjars/angular-ui-bootstrap/0.7.0/
   230 Fri Dec 06 08:50:30 CET 2013 META-INF/resources/webjars/angular-ui-bootstrap/0.7.0/webjars-requirejs.js
 51488 Fri Dec 06 08:50:34 CET 2013 META-INF/resources/webjars/angular-ui-bootstrap/0.7.0/ui-bootstrap-tpls.min.js
122931 Fri Dec 06 08:50:34 CET 2013 META-INF/resources/webjars/angular-ui-bootstrap/0.7.0/ui-bootstrap-tpls.js
 40129 Fri Dec 06 08:50:34 CET 2013 META-INF/resources/webjars/angular-ui-bootstrap/0.7.0/ui-bootstrap.min.js
109195 Fri Dec 06 08:50:34 CET 2013 META-INF/resources/webjars/angular-ui-bootstrap/0.7.0/ui-bootstrap.js
     0 Fri Dec 06 08:50:36 CET 2013 META-INF/maven/
     0 Fri Dec 06 08:50:36 CET 2013 META-INF/maven/org.webjars/
     0 Fri Dec 06 08:50:36 CET 2013 META-INF/maven/org.webjars/angular-ui-bootstrap/
  5217 Fri Dec 06 08:50:26 CET 2013 META-INF/maven/org.webjars/angular-ui-bootstrap/pom.xml
   118 Fri Dec 06 08:50:34 CET 2013 META-INF/maven/org.webjars/angular-ui-bootstrap/pom.properties
----

In this special case, we need to tell the version to the plugin:

.WebJars and Asset plugin in action
[source,java]
----
@Application
@WebJars(@WebJar(value = "angular-ui-bootstrap", version = "0.7.0"))
package myapp;
----

=== Building

Add the WebJars plugin jar to your compilation classpath.

In Maven it can achieved by adding the WebJars plugin dependency to your POM:

[source,xml,subs="attributes,specialcharacters"]
----
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-plugins-webjars</artifactId>
  <version>{juzu-version}</version>
</dependency>
----
