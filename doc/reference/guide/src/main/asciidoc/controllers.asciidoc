Controllers play an essential role in a Juzu application: they contain the code executed when Juzu processes a
request, this chapter provides an in depth study of Juzu controllers.

== Overview

Juzu controllers are simply annotated methods of the application, here is the most basic controller declaration:

[source,java]
----
public class Controller {
  @View public Response.Content index() {
     return Response.render("hello world");
  }
}
----

The annotation +@juzu.View+ declares a _view_ controller, the name +index+ has a special meaning as it will
be used when no other controller is specifed in a Juzu request.

Controller methods can declare parameters for receiving request parameters:

[source,java]
----
public class Controller {
  @View public Response.Content index(String person) {
     return Response.ok("Hello " + person == null ? "world" : person);
  }
}
----

Like previously, the +index+ controller returns the _hello world_ value when it is called the first time. When
the controller is called with the +person+ parameter it returns the hello string personalized with the corresponding
parameter value: Juzu use the declared method parameter name to match against the request parameters, in our case
 the +person+ request parameter.

Any controller class (any class containing at least one controller method) generates a _companion_ class during the
compilation of the project. Such companion class extends the original controller class to provider companion methods
for the controller method. The companion class has the same name than the original class appended with
the ___ character:

[source,java]
----
public class Controller_ {
  public static Dispatch index() { /* Generated code */ }
  public static Dispatch index(String person) { /* Generated code */ }
}
----

Each +index+ methods generated a corresponding +index+ method companion. When any +index+ method is invoked
it returns an +juzu.Dispatch+ object that generates the URL dispatching to the corresponding phase when
the +toString()+ method is invoked. When parameters are provided they will be encoded in the generated URL.

[source,java]
----
@View public Response.Content index() {
  return Response.ok("Hello word. <a href='" + Controller_.index("Juzu") + "'>Say hello to Juzu</a>";
}
----

URL companion methods have the same signature of the originating method.

== Request routing

During a request, Juzu routes the request to the correct controller method. Previously we have seen
that any unmatched view phase request will be handled by the +index+ controller method.

In this section we cover the binding of a controller method to a specific request. This binding is
not the same whether you are writing an application that deploys as a servlet or as a portlet.

The main difference between the two environements are the request and responses: servlets
interacts with the http protocol whereas the portlets interacts with the portal (which can turns
into the WSRP prococol in the case of a remote portlet).

In practice the main difference between servlet and portlet is the routing of the request: with a servlet
the controller methods needs to be bound to route.

=== Http request routing

When Juzu handles an http request it routes this request to a controller based on the request path. Request routing
is based on a set of route declarations, each declaration binds a route to a controller method.

==== Default controller

Before discussing routing configuration, we shall remind the default controller method: the +index+ view
controller method of the default controller will handle any unmatched request:

[source,java]
----
@View
public void index() {
  // Handle unmatched request
}
----

When the application has a single controller class, the default controller is this controller. When there
are more than one controller, there is an ambiguity. In this situation the default controller should be specified
in the +@Application+ annotation:

[source,java]
----
@Application(defaultController = Controller.class)
----

==== Declaring a route

The +@Route+ annotation declares the route for a controller with a +path+ and an optional +priority+:

[source,java]
----
include::{sourcesdir}/juzu/Route.java[tags=class]
----

Controller method should declare an +@Route+ annotation, in practice with http the
annotations +@View+, +@Action+ and +@Resource+ are associated with an +@Route+ annotation.

.Declaring a controller route
[source,java]
----
@View @Route("/show")
public void show() {
  ...
}
----


The request _/show_ will be dispatched to the +show()+ method.

==== Route parameters

Route can declare parameters:

.Route parameters
[source,java]
----
@View @Route("/show/{id}")
public void show(String id) {
  ...
}
----

In this example the route parameter +id+ will match the controller method parameter +id+ and a request like
_/show/123_ will invoke the +show(String id)+ method with the _123_ value.

==== Route parameter pattern matching

Optionally, route parameters can match regular expression. This can be achieved with the +@Param+ annotation:

.Route parameter matching
[source,java]
----
@View @Route("/show/{id}")
public void show(@Param(pattern="[0-9]+") String id) {
  ...
}
----

==== Route overloading

The same route can bound to different phases, the dispatch behavior depends on the http method:

* in a _GET_ method the phases priority are _view_, _action_, _resource_
* in a _POST_ method the phases priority are _action_, _view_, _resource_

.Route parameter matching
[source,java]
----
@View @Route("/show")
public void showWithView() {
  ...
}

@Action @Route("/show")
public void showWithAction() {
  ...
}
----

With such rules:

* A _GET_ request on the _/show_ path will invoke the +showWithAction()+ method
* A _POST_ request on the _/show_ path will invoke the +showWithView()+ method

==== Route priorities

When several routes match the same request, the router will use the first route found. The +priority+
parameter of the +@Route+ annotation can be used to increase the priority of a route. This can
be useful, specially when a route contains a parameter that could match another route instead.

.Route priority
[source,java]
----
@View @Route("/show/status", priority = 1)
public void showStatus() {
  ...
}
@View @Route("/show/{name}")
public void show(String name) {
  ...
}
----

In the example, the +showStatus()+ controller will be invoked when the route _/show/status_ is requested.
Without this higher priority, the +show(String name)+ controller might be invoked instead. When no priority is
specified, the default priority is 0.

==== Redirect after post

As explained in the <<phases>> chapter, an action never produces markup, instead an action phase
 is followed by a view phase that will return a markup response. Juzu handles this interaction with an http redirection
 to the next view phase via the <<redirect_after_post>> pattern.

This behavior is good for the user because the browser will be updated with an URL of the view phase that is
bookmarkable and safely refreshable (i.e the user an refresh the page safely).

However Juzu does not enforce this behavior and it can be changed to have the view phase immediatly
invoked after the action phase.

[source,java]
----
@Action
@Route("/process")
public Response.View process() {
  return Controller_.index().withNo(PropertyType.REDIRECT_AFTER_ACTION);
}

@juzu.View
@Route("/show")
public void show() {
  //
}
----

=== Portlet request routing

Unlike the http protocol, the portlet request routing does not require the +@Route+ annotation
because portlet requests are managed by the portal and have no concept of path mapping.

To achieve request routing, the portlet uses a special portlet request parameter
named _juzu.op_ . This parameter determines which controller should be called
during a phase. When the _juzu.op_ parameter is not present, Juzu will look for the +index+
view controller.

== Controller phases

There are several kinds of controllers bound to a request phase:

* View controllers annoted with the +@juzu.View+ annotation
* Action controllers annotated with the +@juzu.Action+ annotation
* Resource controllers annotated with the +@juzu.Resource+ annotation
* Event controllers annotated with the +@juzu.Event+ annotation (_not yet implemented_)

=== View controllers

A view controller method produces aggregated markup for the application, the invocation of the method
should produce markup that will be aggregated in larger page, therefore it should not care about the overall HTML
structure.

View parameters describe the current parameters of the view, they are often used for navigation purpose in the application.
Juzu supports simple data types such as string or integers, structured data types modelled by Java objects.

* Simple data types can be the following types +String+, +List<String>+ and +String[]+. Later this will be expanded
to more simple types such as number, etc..
* Structured data types which are distinguished from other parameters by annotating the controller handler parameter annotation
with the the +@juzu.Mapped+ annotation

View controller method should return a +juzu.Response+ object that is the content produced by the method. To be more precise
 it should return a +Response.Body+ or +Response.Content+ object (the latter being a subclass of the former) that contains
 everything Juzu needs to display the application.

During the view phase a controller can generate URLs to other phases (except the event phase) by using controller companion
 methods. Companion methods returns a +juzu.Dispatch+ object to represent the URL. The final
 URL is returned by the +toString()+ method of the dispatch object.

=== Action controllers

Action controller are executed during the action phase of a Juzu application. Usually action methods perform two tasks

* implement the logic of the application processing, for instance inserting an entity in the database
* configure the next view phase: setting the next view controller to display and configuring its view parameters
of the method when they exist

[[controller_action_view]]
In the following example, the controller method +createUser+  creates a user and
returns a +Response.View+ object that will tell Juzu to use the +showUser+ view controller during the next view phase:

[source,java]
----
@Action
public Response.View addUser(String userName, String password) {
  orgService.createUser(userName, password);
  return Controller_.showUser(userName);
}
----

+showUser+ is a companion _view_ method that creates a +Response.View_ object configured with the
controller and arguments to use. Like url companion methods, view companion methods are generated during
the compilation of the project by Juzu.

=== Resource controllers

Resource controllers are similar to view controllers, however the resource has full control over the target page.
It means that a resource controller must produce the entire resource and it can also chose the mime type returned. Resource
controllers have several use cases:

* Implement ajax resource serving
* Produce an application resource, such as an image, a script, etc...

Resource controllers are by default bound to all HTTP methods. The +@Resource+ annotation can be used to restrict
the http methods a resource controller can handle:

[source,java]
----
@Route("/users/{uid}");
@Resource(method = { Method.GET })
public Response get(String uid) {
   ...
}

@Route("/users/{uid}");
@Resource(method = { Method.PUT })
public Response put(String uid) {
   ...
}

@Route("/users/{uid}");
@Resource(method = { Method.DELETE })
public Response delete(String uid) {
   ...
}
----

NOTE: resource controller HTTP method routing only works for HTTP bridges. In case of the portlet bridge routing
is done with the controller method and therefore the HTTP method does not play a role.

=== Event controllers

_not yet implemented_

== Request parameters

Juzu supports request parameter mapping with:

* Plugable value types with support for various primitive types, +java.util.Date+ type
* Multivalued list and array types
* Bean types

=== Primitive type

Primitive types can be mapped to request parameters, Juzu will do automatically the conversion between the types
and the request parameters. Most primitive types can be used, the only exception is the +char+ type, as it could be
ambiguously mapped to the char codepoint or the char value, +String+ or numeric types shall be used instead. Those types
can be used under their boxed type or their primitive type.

[source,java]
----
@Action
public Response.Content sum(Integer left, int right) {
  if (left != null) {
    return Response.ok("sum = " + (left + right));
  } else {
    return Response.error("Missing input");
  }
}
----

NOTE: when the parameter of a primitive value is not present in the request, the default primitive value is used

=== Date type

The +java.util.Date+ type can also be mapped, in addition it can be formatted with a specific pattern thanks to the
+juzu.Format+ annotation:

[source,java]
----
@View
public Response.Content show(@Format("yyyy.MM.dd G 'at' HH:mm:ss z") Date date) throws Exception {
  ...
}
----

=== Multivalued type

Multivalued types can be used under the form of a Java array or a generic +java.util.List+ easily:

[source,java]
----
@View
public Response.Content sum(int[] values) {
  ...
}
----

or

[source,java]
----
@View
public Response.Content sum(List<Integer> values) {
  ...
}
----

=== Bean type

Juzu is able to map a set of request parameters, to the properties of a simple bean:

[source,java]
----
public class User {

  public String username;
  public String password;
  public String name;

  public User() {}

  public User(String name, String password, String username) {
    this.name = name;
    this.password = password;
    this.username = username;
  }
}
----

The controller handler needs to declare the parameter using this type with the +@Mapped+ annotation:

[source,java]
----
@Action
@Route("/login")
public Response login(@Mapped User user) {
  ...
}
----

The properties can either be:

* public fields
* getters/setters

== Request entity processing

When the request provides an HTTP entity, Juzu can decode it and make it available to your controllers. Such kind of
requests can be:

* a HTTP request targetting any phase
* a Portlet request targetting an _action_ or a _resource_ phase

In such case, the entity may be decoded by Juzu otherwise it is available to your controllers via the
+juzu.request.ClientContext+ interface.

By default Juzu handles _application/x-www-form-urlencoded_ requests, decodes the associated form and map it
 to the controllers parameters. Other requests can be processed by an _entity unmarshaller_ which is a pluggable
 unmarshaller for mapping the entity to controller parameters.

=== File upload plugin

The file upload plugin integrates http://commons.apache.org/fileupload/[Apache Commons FileUpload] in Juzu.
This unmarshaller decodes multipart requests as file objects and can inject them as controller method parameters.
It works with the servlet bridge and the portlet bridge.

The plugin can be used in your Maven build using a simple dependency:

[source,xml,subs="attributes,specialcharacters"]
----
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-plugin-upload</artifactId>
  <version>{juzu-version}</version>
</dependency>
----

==== File upload in an action phase

File upload can be handled during an action of a portlet or a servlet:

[source,java]
----
@Action
@Route("/upload")
public void upload(org.apache.commons.fileupload.FileItem file) {
   if (file != null) {
      // Handle the file upload
   }
}
----

NOTE: The +@Route+ annotation is only meaningfull for the servlet bridge. In case of a portlet, the URL
is managed by the portal.

==== File upload in a resource phase

File upload can also be handled in a resource phase.

[source,java]
----
@Resource
@Route("/upload")
public Response.Content upload(org.apache.commons.fileupload.FileItem file) {
   if (file != null) {
      // Handle the file upload
   }
   return Response.ok("Upload is done");
}
----

Handling upload in a resource phase can be used when the file is uploaded via Ajax: the application
 does not want a view phase to be triggered after the upload.

=== Json processing

The _Jackson_ plugin decodes json entities using the https://github.com/FasterXML/jackson[Jackson] framework. It can
decode to a Jackson native tree or perform mapping to Java object using Jackson mapper.

The plugin can be used in your Maven build using a simple dependency:

[source,xml,subs="attributes,specialcharacters"]
----
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-plugin-jackson</artifactId>
  <version>{juzu-version}</version>
</dependency>
----

==== Decoding to a Json tree

[source,java]
----
@Action
@Route("/post")
public void post(com.fasterxml.jackson.databind.JsonNode tree) {
  ...
}
----

==== Decoding to a Java object

Jackson provides a powerful mapper for creating java objects from Json documents, it can of course be used with
this plugin.

[source,java]
----
@Action
@Route("/post")
public Response.View action(@Jackson MyObj obj) throws IOException {
  ...
}
----

The +obj+ argument mapped to the java objects must be annotated with the +@juzu.plugin.jackson.Jackson+ annotation
so the unmarshaller can recognize it.

== Controller classes

Controller methods belongs to Java classes known as controller classes. Controller classes are ordinary java classes,
any class can be turned into a controller by declaring a controller method. Controller classes are registered in
the IOC container of the Juzu application, we will study later the benefits.

=== Controller life cycle

We will study in this section the complete life cycle of a controller object. Juzu relies on the IOC container
for managing the life cycle of controller objects, based on the +@javax.inject.Inject+ annotation. If the
 controller desires, it can receive life cycle callbacks thanks to the +@javax.annotation.PostConstruct+
 and +@javax.annotation.PreDestroy+ annotations.

Let's have a look at the complete life cycle of a controller object during a Juzu request:

.Life cycle of a controller object
image::images/controllers/lifecycle.png[Life cycle,500,align="center"]

. Juzu begins the request, it will need an controller instance for the request and asks the IOC container an instance
. The IOC container creates a fully operational controller instance in several stesp
.. It gets a controller object instance either by creating a new instance by using the default constructor
or the constructor annotated with ##@Inject##
.. It injects the controller declared dependencies by the ##@Inject## annotation
.. It invokes any method annotated with ##@PostConstruct##
. Juzu obtains a valid controller instance and [[dispatches>>#controller_dispatch]] that method on the controller
. After the invocation, Juzu releases the controller instance and delegates it to the IOC container again
.. It invokes any method annotated with ##@PreDestroy##
.. It makes the instance available to the garbage collector
. Juzu ends the request and use the ##Response## objet returned by the controller method

[[request_lifecycle]]
=== Request lifecycle

The bare minimum Juzu will do when dispatching to a controller method is to invoke this method with the proper
arguments and use the optionally returned object as a response for the request.

When the controller wants to deal with the dispatch in a generic manner (i.e detyped), it can implement the
+juzu.request.RequestLifeCycle+ interface that allows to:

* Be aware of the request life cycle around (i.e before and after) the controller method dispatch
* Control the response for the current request

.The RequestLifeCycle interface
[source,java]
----
include::{sourcesdir}/juzu/request/RequestLifeCycle.java[tags=class]
----

* The +beginRequest+ method is invoked before the controller method invocation and the +endRequest+ is invoked
after the controller method invocation.
* The +RequestContext+ object provides a read/write access to a +juzu.Response+ object that is set with the
 response returned by the controller method invocation. The controller method can declare no return type and instead
 set the response directly with the +RequestContext#setResponse(juzu.Response)+ method.
* When the controller method invocation throws an exception, the +endRequest+ method will be invoked with a
 +juzu.Response.Error+ response set on the +RequestContext+.
* The +beginRequest+ invocation can optionally set of response on the +RequestContext+, when it does the dispatch
 will stop here and the provided response will be the request response.
* The +endRequest+ invocation can optionally set a response on the +RequestContext+, when it does this overrides
the previous response provided during the dispatch to the controller method.

