Web assets are resources used over the web such as stylesheet and script files. Using an asset is done in two steps:

* declare the asset
* serve the asset

== Asset plugin

The asset plugin provides declarative asset configuration. The +@Assets+ annotation declares a list of assets used by
the an application.

.jQuery UI declarative asset configuration
[source,java]
----
@Assets({
  @Asset(id = "jquery", value = "javascripts/jquery-1.7.1.min.js"), // <1>
  @Asset(value = { "javascripts/jquery-ui-1.7.2.custom.min.js", ui-lightness/jquery-ui-1.7.2.custom.css }, // <2>
         depends = "jquery") // <3>
  }}
)
package my.application;
----
<1> declares the _jQuery_ asset
<2> declares the _jQuery-UI_ asset composed of the JavaScript source and its associated stylesheet
<3> depends on +jquery+ assets

== Configuring assets

Assets can configured for the application with:

* an _id_ to reference it within the application
* a _location_ and _value_ for resolving the asset physical resources which can be empty, a single file or several files
* a list of _dependencies_ referencing other assets that are needed by the asset

For example, the _jQuery-UI_ plugin could be identified by _jquery-ui_ with the dependency onto the _jquery_ js asset and
the _jQuery-UI_ stylesheet. Its physical location would be the +asset+ package with the +jquery-ui-1.4.2.min.js+ name.

NOTE: an empty value asset is useful for declaring an asset defined by its dependencies

=== The asset identifier

Assets are identified by a unique id within the application, this value is however optional. When no id is declared
, the asset value is used for creating an id from the asset file name:

* The value +jquery-ui-1.7.2.custom.min.js+ produces the same +jquery-ui-1.7.2.custom.min.js+ value
* The value +js/jquery-ui-1.7.2.custom.min.js+ produces the +jquery-ui-1.7.2.custom.min.js+  value

=== Application assets

Applications assets can be located anywhere on the application classpath, they can be either absolute or relatives. Relative
assets declared by the asset plugin must be located in the +assets+ package of the application, for instance
an application packaged under +my.application+ will have its relative assets located under +my.application.assets+.

.Declarative relative application asset configuration
[source,java]
----
@Assets(@Asset("myscript.js"))
package my.application;
----

The location +AssetLocation.APPLICATION+ is not declared because it is the default one.

=== Server assets

Server assets are served by the webserver in which the application is deployed. Relative server assets are served from
the war file containing the application.

.Declarative relative server asset configuration
[source,java]
----
@Assets(@Asset(value = "myscript.js", location = AssetLocation.SERVER))
package my.application;
----

=== External assets

External assets declares an opaque URL for Juzu.

.External classpath asset configuration
[source,java]
----
@Assets(@Asset(
  value = "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js",
  location = AssetLocation.URL))
package my.application;
----

== Asset serving

During a request, asset identifiers are added to the response. At the end of the request, Juzu translates the assets into
a list of uri to add to the page.

.Using assets in a request
image::images/assets/assets1.png[Assets in request,700,align="center"]

An asset reference is a link to an asset value that is configured externally, thus an asset of any kind will always resolve
to a location and an uri. Let's examine the different possible asset location:

* +AssetLocation.URL+: the value is opaque to Juzu, for instance the a CDN hosted script such as _https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js_.
* +AssetLocation.SERVER+: the asset is served by the same web server in which Juzu is deployed. If the asset value is relative, the final uri will
resolve relatively to the web archive context address.
* +AssetLocation.APPLICATION+: the asset is served by Juzu _asset server_ (a servlet configured in the web application) and the resource is located
 on the classpath.

Asset serving can either be done declaratively with the +@WithAssets+ annotation or with methods of the +juzu.Response.Content+
class.

=== Declarative asset serving

The +WithAssets+ annotation tells Juzu to add an asset to a content response, it takes asset ids as arguments:

.Serve jQuery and Twitter Bootstrap with the application index page
[source,java]
----
@WithAssets("jquery", "bootstrap")
@View
public Response.Content index() {
  ...
}
----

The annotation can be declared on _controller methods_, _classes_ or _packages_. such declarations are
 _cascaded_ to the nested controllers:

.+@WithAssets+ annotations are cascaded with a few rules
[cols="2*",options="header"]
|===
|Declared on
|Effective on

|Method
|Controller method

|Class
|Controller methods declared in the class

|Package
|Controller classes declared in the current and sub package and sub
|===

Those rules apply where the +@WithAssets+ annotation occurs, in particular it is also valid for overriden methods.
The overriding method will not use the annotations of its current class or packages unless the method redeclares an +@WithAssets+
 annotation (possibly empty).

Annotating the application package with +#WithAsset+ will serve all assets declared in the application for all controllers.
If you need finer grained serving, remove it and use it on controller directly.

=== Dynamic asset serving

Declarative asset serving is powerful, however is requires you to declare the asset to server at compilation time.
When the application does not know the assets to serve at compilation, this behavior can be also dynamic by
using the Juzu API.

.Serve _jQuery_ and _Twitter Bootstrap_ with the application index
[source,java]
----
@View
public Response.Content index() {
  ...
  return content.withAssets("jquery", "bootstrap");
}
----

The +withAssets+ method does exactly the same job than the +WithAssets+ annotation.

NOTE: The +@WithAssets+ annotation and the +withAssets+ method are cumulative.{{/note}}

== Asset server

For serving classpath assets, Juzu requires the configuration of the asset server as a servlet declaration:

[source,xml]
----
<servlet>
  <servlet-name>AssetServlet</servlet-name>
  <servlet-class>juzu.impl.asset.AssetServlet</servlet-class>
  <load-on-startup>0</load-on-startup>
</servlet>
<servlet-mapping>
  <servlet-name>AssetServlet</servlet-name>
  <url-pattern>/assets/*</url-pattern>
</servlet-mapping>
----

This declaration should be in the _web.xml_ of the application whether it is a servlet or a portlet application.

NOTE: If you are using Servlet 3.0, this declaration is not necessary as it will be registered by Juzu dynamically
using a +javax.servlet.ServletContainerInitializer+

== Asset manager

When an application is deployed, assets are registered against the _asset manager_. The asset manager has several
 responsibilities:

* manage asset dependencies: the order in which assets are literaly declared when they are served. For instance
the _jquery-ui_ asset depends on the _jquery_ asset because the jquery script must be loaded before the _jquery-ui_
script.
* resolve asset references: each asset reference must be resolved and produce a final web url that will produce the resource
 when it is resolved by the web browsers
