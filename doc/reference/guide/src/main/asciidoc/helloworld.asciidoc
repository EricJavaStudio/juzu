= Hello World

The first section <<builddeployruntest>> of this guide covers the entire life cycle of an application, this section
will teach you about the structure of a basic Hello World application written with Juzu. The goal of this chapter is
not to show you an entire Juzu application, since the Juzu tutorial already serves this purpose, instead the goal is to
show you how to write the most basic application as any Hello World app does.

We suppose you have setup already the application structure, which means you have a Java project with the
correct dependencies for compiling the Juzu application.

== Step 1: application package

The first step is to decide the application package name. Indeed a Juzu application belongs to a single Java
package and its subpackages, allowing several applications in the same unit of compilation. Let's name our
application +examples.helloworld+. That's how Juzu identifies an application, by its package name.

Let's create this package and most importantly the Java _named package_: the named package is a file named
 _package-info.java_ that resides a the package folder, it can be used for documenting a package but also
to annotating a package. Indeed Java packages can be annoated and Juzu use the +@juzu.Application+ package
annotation for declaring an application:

[source,java]
.The _examples/helloworld/package-info.java_ file
----
include::{sourcesdir}/examples/helloworld/package-info.java[]
----

== Step 2: hello world controller

Juzu follows the MVC paradygm for creating application and thus we need to provide at least one controller
 to handle web requests, let's create one!

[source,java]
.The _examples/helloworld/HelloWorldController.java_ file
----
import juzu.View;
import juzu.Response;

public class HelloWorldController {
  @View
  public Response index() {
    return Reponse.ok("Hello World");
  }
}
----

That's it, our application will now say _Hello World_ to any incoming request. The +@View+ annotation defines
 a Juzu view and the method name +index+ is a special name that catches any unmatched request. It returns
 a response object that contains the markup of the page.

== Step 3: adding a template

Let's wrap up this by adding a template for the view. We need to create first an _helloworld.gtmpl_ template in
the +templates+ sub package:

.The _examples/helloworl/templates/helloworld.gtmpl_ file
----
include::{sourcesdir}/examples/helloworld/templates/helloworld.gtmpl[]
----

This template can then be used by injecting it in the controller using dependency injection:

[source,java]
----
include::{sourcesdir}/examples/helloworld/HelloWorldController.java[]
----

== Step 4: declaring the application

Finally our application must be declared when it is deployed in a _war_ file. The runtime in which the application
executes is called the _bridge_ and we can declare it either as a _servlet_ application or as a _portlet_ application.

=== Servlet application

Declaring as a servlet application is easy to do via the <<servlet>>: the +@Servlet+ annotation annotates our
application package, pretty much like the +@Application+ does:

[source,java]
.Declare the servlet application mounted on the _/_ path
----
@Application
@Servlet("/")
package examples.helloworld;
----

This will generate a servlet running the application on the _/_ path. If you like you can declare the application
directly in the _web.xml_ file, see <<servlet_bridge>>.

=== Portlet application

Declaring as a portlet application can only be done via the _portlet.xml_ file since portlet containers don't
support annotation based configuration. The <<portlet_bridge>> chapter covers the configuration of such
portlet, in our case the describe is:

[source,xml]
----
<?xml version="1.0" encoding="UTF-8"?>
<portlet>
  <portlet-name>HelloWorldPortlet</portlet-name>
  <display-name xml:lang="EN">Hello World Application</display-name>
  <portlet-class>juzu.bridge.portlet.JuzuPortlet</portlet-class> <1>
  <init-param>
    <name>juzu.app_name</name> <2>
    <value>examples.helloworld</value>
  </init-param>
  <supports>
    <mime-type>text/html</mime-type>
  </supports>
  <portlet-info>
    <title>Hello World</title>
    <keywords>juzu,sample</keywords>
  </portlet-info>
</portlet>
----
<1> The +JuzuPortlet+ will run the application
<2> Configured with the _juzu.app_name_ init parameter
