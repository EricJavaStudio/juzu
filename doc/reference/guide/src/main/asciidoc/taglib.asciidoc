A tag library is an essential component of a templating system, allowing to enrich a templating by encapsulating reusable programmable
logic.

== Taglib syntax

Like most taglib syntaxes, Juzu provides two syntaxes for invoking a tag:

.Start and end tag syntax
----
#{foo}bar#{/foo}
----

The start/end syntax opens the tag with +#{foo}+ and ends it with +#{/foo}+.

A tag can also be empty:

.Empty tag syntax
----
#{foo/}
----

A tag can also be invoked empty with the +#{foo/}+ syntax.

== Include tag

The _include_ tag simply includes a template inside the current template. The inclusion is dynamic and not static, meaning
 that the content of the included template is not _inserted_ in the calling template, instead when inclusion is performed
 the control is passed to the included template.

.The include tag
----
#{include path=dispatched.gtmpl/}
----

The _path_ attribute determines the template to include, the path value is relative to the templates package.

== Decorate / Insert tag

The _decorate_ tag allows the content of the decorating template to wrap the content of the template invoking the tag.
 The _insert_ tag should be used in the decorating template to specify the place where to insert the markup produced
 by the template to decorate.

.The wrapped template
----
#{decorate path=box.gtmpl/}
----

.The decoraring template
----
<div style="border: 1px solid black">
#{insert/}
</div>
----

== Title tag

The _title_ tag specifies a title to insert in the +juzu.Response.Content+ object the template will produce.

.Setting the title
----
#{title value=Home/}
----

== Param tag

The _param_ tag enhances the type safety of templates, allowing to declare parameters for executing a template. When
such a parameter is declared, the generated template class companion will have a fluent parameter for setting the
value of the parameter:

.Declaring a template parameter
----
#{param name=color/}
----

.Using the template parameter
[source,java]
----
@Inject my.templates.index index;

@View
public Content.Response index() {
  return index.with().color("red").ok();
}
----

== Custom tags

Since Juzu 0.7.0, custom tags can be implemented, either as Java class or as templates, we will study both ways in this section.

[[simpletags]]
=== Simple tags

Simple tags allow creation of custom tags with templates located in the +tags+ package of your application.

.Our simple tag
[source]
----
My simple tag
----

Put this content in the _tags/mytag.gtmpl_ file of the application.

Obviously Juzu needs to be aware of the existence of this tag, this is achieved using the +@Tag+/+@Tags+ annotations:

.Declaring our simple tag
[source,java]
----
@Application
@Tags(@Tag(name = "mytag", path = "mytag.gtmpl"))
package my.application;

import juzu.Application;
import juzu.template.Tags;
import juzu.template.Tag;
----

Simple tags are templates so most of the tag syntax applies here, however there are a few differences between application
templates and simple tags:

* Simple tags are in the _tags_ package instead of the _templates_ package
* Simple tags cannot reference other templates, the tag syntax must be used instead

==== Simple tag parameters

Simple tags can have parameters, to access them use the implicit +parameters+ map property in the tag template.

.Accessing the simple tag parameters
[source]
----
Hello ${parameters.name}
----

==== Simple tag body

Simple tags can have a body that can be evaluated within the tag body using the +insert+ tag (this tag is also be used
by the +decorate+ tag).

.Evaluating the simple tag body
[source]
----
<foo>#{insert/}</foo>
----

The body can be evaluated as much as you want, allowing to create loop tags.

=== Java tags

Tags can also be implemented with Java code, let's look at the actual implementation of the _title_ tag:

.The title tag implementation
[source,java]
----
include::{sourcesdir}/juzu/impl/tags/TitleTag.java[tags=class]
----

* The class extends the +juzu.template.TagHandler+ abstract class
* The constructor must provide the tag name to the +TagHandler+ super constructor
* The tag is rendered with the +render+ method

Finally the tag must be declared as a http://docs.oracle.com/javase/6/docs/technotes/guides/jar/jar.html#Service%20Provider[Java Service Provider API] which is achieved by having the following content in the
_META-INF/services/juzu.template.TagHandler_ file:

.The tag declaration
[source,java]
----
juzu.impl.tags.TitleTag # the tag service provider
----
