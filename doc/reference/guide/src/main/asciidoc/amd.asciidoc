The AMD plugin provides declarative support for JavaScript modules using annotations. It relies on the
https://github.com/amdjs/amdjs-api/wiki/AMD[Asynchronous Module Definition] specification implemented by the
http://requirejs.org/[RequireJS] project.

== Introduction to modules

JavaScript does not provide a natural way for namespacing, the notion of module was designed to solve this problem.
This natural lack of namespacing can be perceived as a lack, instead it should be seen as an advantage as modules
provide namespacing and more: indeed the module pattern allows to create dependencies between modules and resolve
them at runtime enabling on demand and parallel loading of JavaScript resources.

This guide will not explain modules because we havenâ€™t designed a module system for Juzu. Instead Juzu uses the RequireJS
library and integrates it. Therefore the best documentation you can read about modules is the RequireJS documentation
you can also read the excellent http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html[article]
about modules in depth.

In the essence the notion of module can be viewed as:

* An identifier
* A list of dependencies on the modules required by the module to work properly
* The code packaged usually expressed as a self-executing function
* The product which is an object produced by the module that is usually consumed by other modules

At runtime the dependency system defines a graph of function to execute, the product of each module being injected in
the other modules. It can be seen as a simple dependency injection system able to load modules in an asynchronous and
parallel fashion providing parallel loading, namespacing and dependency management.

== Defining a module

The +@Defines+ and +@Define+ are used to declare the JavaScript which is either a canonical module as defined
 by the AMD specification or a simple self-executing function.

When the javascript is self-executing function, this script is wrapped to provide the expected RequireJS format, let's
study a quick example with a module:

.Defining a simple module
[source,java]
----
@Defines(value={@Define(name="Foo", path="foo.js")})
package my.application
----


.The +foo.js+ self-executing function
[source,java]
----
(function () {
  //Do something
})();
----

Equivalent to this declaration in the RequireJS format:

[source,java]
----
define("Foo", function() {
  return //Something
});
----

Modularity allows to define cross dependencies between modules, the +@Define+ annotation allows that:

.Defining a module with dependencies
[source,java]
----
@Defines(
  value = {
    @Define(name="Foo", path="foo.js"),
    @Define(name="Bar", path="bar.js", dependencies={@Dependency(name="Foo", alias="foo")}}
)
----

.The +bar.js+ self-executing function
[source,java]
----
(function(foo) {
  //Do something
})(foo);
----

Equivalent to this declaration in the RequireJS format:

[source,java]
----
define("Bar", ["Foo"], function(foo) {
  return //Something
});
----

The Juzu AMD plugin allows to provide custom adapter for adapting the script to the expected format. With this flexibility
it is possible to declare an adapter wrapping the adapted script. The jQuery library is a good example of how a custom
adapter can be useful. Thanks to the adapter feature we can reuse the jQuery without any change:
 
.The jQuery uses the following construct for defining itself
[source,java]
----
(function(window, undefined) {
})(window);
----

The main issue with this construct is that it will bind jQuery to the window but most importantly it will not return any
value as expected by the dependency system. Thanks to the custom adapter we can integrate it easily:

[source,java]
----
@Define(
  id = "jquery",
  path="jquery-1.7.1.js",
  adapter="(function() { @{include} return jQuery.noConflict(true);})();")
----

The adapter attribute can contains mixed content and the +@{include}+ will perform a mere inclusion (as a C language includes)
of the original jQuery script in the resulting module:

[source,java]
----
define("jquery", [], function() {
  return (function() {
    (function(window, undefined) {
    })(window);
    return jQuery.noConflict(true);
  })();
});
----

NOTE: The Juzu AMD definition adapts only the javascript located at +AssetLocation.APPLICATION+. The +@Require+ annotation
must be used for other kind of locations.

== Requiring a module

The Juzu AMD +@Require+ annotation only register a JavaScript module for RequireJS Loader. It does not wrap or adapt
content and does not manage module dependencies.

Here is an example of using +@Requires+ and +@Require+ to register the +foo.js+ script and the +bar.js+ scripts
that depends on +foo.js+.

[source,java]
----
@Requires (
  value = {
    @Require(id = "Foo", path = "foo.js"),
    @Require(id = "Bar", path = "bar.js")}
)
package my.application;
----

.The +foo.js+ module declaration
[source,java]
----
define("Foo", function() {
  return {
    text: "Hello"
  };
});
----

.The +bar.js+ module declaration
[source,java]
----
define("Bar", ["Foo"], function(foo) {
  return {
    text : foo.text + " World"
  };
});
----
