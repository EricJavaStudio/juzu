The AMD plugin provides declarative support for JavaScript modules using annotations. It relies on the
https://github.com/amdjs/amdjs-api/wiki/AMD[Asynchronous Module Definition] specification implemented by the
http://requirejs.org/[RequireJS] project.

== Introduction to modules

JavaScript does not provide a natural way for namespacing, the notion of module was designed to solve this problem.
This natural lack of namespacing can be perceived as a lack, instead it should be seen as an advantage as modules
provide namespacing and more: indeed the module pattern allows to create dependencies between modules and resolve
them at runtime enabling on demand and parallel loading of JavaScript resources.

This guide will not explain modules because we havenâ€™t designed a module system for Juzu. Instead Juzu uses the RequireJS
library and integrates it. Therefore the best documentation you can read about modules is the RequireJS documentation
you can also read the excellent http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html[article]
about modules in depth.

In the essence the notion of module can be viewed as:

* An identifier
* A list of dependencies on the modules required by the module to work properly
* The code packaged usually expressed as a self-executing function
* The product which is an object produced by the module that is usually consumed by other modules

At runtime the dependency system defines a graph of function to execute, the product of each module being injected in
the other modules. It can be seen as a simple dependency injection system able to load modules in an asynchronous and
parallel fashion providing parallel loading, namespacing and dependency management.

== Declaring a module

The +@Modules+ and +@Module+ are used to declare JavaScript modules as defined by the https://github.com/amdjs/amdjs-api/wiki/AMD[AMD specification]. The
+@Module+ interface wraps an +@Asset+ annotation to tell Juzu that this is a module asset:

.Defining a simple module
[source,java]
----
@Modules(@Module(@Asset(id="Foo", value="foo.js")))
@WithAssets("Foo")
package my.application
----

.The +foo.js+ module
[source,java]
----
define("Foo", function() {
  return {
    text: "Hello"
  };
});
----

Modularity allows to define dependencies accross modules, the +@Asset+ annotation +depends+ member can be used
for declaring those dependencies. It is not formally require in the client side to define such dependencies as they
are already declared in the JavaScript module itself, Juzu needs to be aware of those dependencies in order to
compute the specific _require.js+ configuration when serving a page.

.Defining a module with dependencies
[source,java]
----
@Modules({
  @Module(@Asset(id="Foo", value="foo.js")),
  @Module(@Asset(id="Bar", value="bar.js", depends={"Foo"}))
})
@WithAssets("Bar")
----

.The +bar.js+ module
[source,java]
----
define("Bar", ["Foo"], function(foo) {
  return {
    text : foo.text + " World"
  };
});
----

The module identifiers declared inside the JavaScript modules must match the identifiers declared in the +depends+
and +id+ annotation declarations.

== Dependency aliases

Sometimes a dependency id declared by a JavaScript module does not fit the application and it needs to be changed to
 another value.

For example let's say that the _Foo_ dependency should be renamed _foo_ in the +bar.js+ module

.The +bar.js+ module
[source,java]
----
define("Bar", ["foo"], function(foo) {
  return {
    text : foo.text + " World"
  };
});
----

In this case dependency ids can be aliased by the +@Module+ annotation:

[source,java]
----
@Modules({
  @Module(@Asset(id="Foo", value="foo.js")),
  @Module(@Asset(id="Bar", value="bar.js", depends={"Foo"}), aliases={"foo")})
})
@WithAssets("Bar")
----

NOTE: The Juzu AMD definition provides dependency aliasing only for JavaScript located at +AssetLocation.APPLICATION+.

== Module adapters

The AMD plugin allows to provide custom adapter for adapting JavaScript files to the expected format. It allows
to turn non JavaScript files into proper JavaScript modules. Thanks to the adapter feature we can reuse the
jQuery without any change:
 
.The jQuery uses the following construct
[source,java]
----
(function(window, undefined) {
  ...
})(window);
----

The main issue with this construct is that it will bind jQuery to the window but most importantly it will not return any
value as expected by the dependency system. Thanks to the custom adapter we can integrate it easily:

[source,java]
----
@Module(
  @Asset(id="jquery", value="jquery-1.7.1.js"),
  adapter="(function() { @{include} return jQuery.noConflict(true);})();"
)
----

The adapter attribute can contains mixed content and the +@{include}+ will perform a mere inclusion (as a C language includes)
of the original jQuery script in the resulting module:

[source,java]
----
define("jquery", [], function() {
  return (function() {
    (function(window, undefined) {
    })(window);
    return jQuery.noConflict(true);
  })();
});
----

NOTE: The Juzu AMD definition adapts only the JavaScript located at +AssetLocation.APPLICATION+.
