We will study in this chapter how to build and deploy a Juzu application.

== Introduction

Building a Juzu application is usually done in two steps:

* Compile the application to classes
* Package the application as a web application (_war_ file)

Compiling an application requires a few jars to be present on the compilation classpath:

* The Juzu core jar for the Juzu API
* The JSR-330 jar for the @Inject API
* Any Juzu extension jar such as plugins or additinal template engines

After compilation, classes need to be packaged as a web application archive (_war_) and then deployed in a server. We
will show several ways to package your Juzu application.

== Juzu dependencies

Let's start by looking at the dependencies required by Juzu, there are several kinds of dependencies:

* compilation time dependencies like the Less plugin
* runtime dependencies
** provided by server like the _@Inject_ jar provided by an EE server but not by a Servlet Container
** embedded in the web application like Groovy

=== Juzu core dependendencies

Juzu is built on top of a plugin architecture allowing to reduce the number of dependencies to the minimum for the core
of the framework.

.Juzu core dependencies
[cols="5*^",options="header"]
|===
|
|GAV
|Compilation
|Servlet Container
|Java EE Server

|Juzu
|org.juzu:juzu-core
|&#x2611;
|&#x2611;
|&#x2611;

|Groovy
|org.codehaus.groovy:groovy-all
|&#x2610;
|&#x2611;
|&#x2611;

|@Inject
|javax.inject:javax.inject
|&#x2611;
|&#x2611;
|&#x2610;
|===

=== Injection Container dependendencies

Juzu leverages an Injection Container (IOC) at runtime for wiring the various objects managed by the framework. Several
implementations can be used and you should configure the correct dependencies according to the container you are using:

* _Spring 3_
* _Google Guice 3_
* Context and Dependency Injection
** _CDI_ provided by the server
** _Weld_ the CDI implementation managed by Juzu

NOTE: _Context and Dependency Injection_ specification is an extension (JSR 299) of the _@Inject_ specification (JSR-330)

These implementation jars are never required at compilation time, unless you use specific classes in your project, such
as the +@Autowire+ annotation of Spring, or the +@Produces+ annotation of CDI.

At runtime the jars you needs depends on the implementation you use:

.IOC dependencies
[cols="3*^",options="header"]
|===
|
|Servlet Container
|Java EE Server

|Spring
|&#x2611;
|&#x2611;

|Google Guice
|&#x2611;
|&#x2611;

|Weld
|&#x2611;
|&#x2610;

|CDI
|&#x2611;
|&#x2610;
|===

NOTE: When using CDI with a Servlet Container, you need to chose an implementation of CDI and configure it
specifically for the Servlet Container, for instance you can configure
http://docs.jboss.org/weld/reference/1.0.0/en-US/html/environments.html#d0e4998[the Weld implementation for Tomcat 7].

== Packaging a Juzu application

Packaging a Juzu application is quite easy to achieve when you know which dependencies Juzu and the runtime expect
or provide. Juzu jars are deployed in the http://search.maven.org/[Maven Central repository].

When packaging your application you can follow:

[cols="4*^",options="header"]
|===
|
|Compilation
|Servlet Container
|EE Container

|+org.juzu:juzu-core+
|&#x2611;
|&#x2611;
|&#x2611;

|+org.codehaus.groovy:groovy-all+
|&#x2611;
|&#x2611;
|&#x2611;

|+javax.inject:javax.inject+
|&#x2611;
|&#x2611;
|&#x2610;

|Guice
|&#x2610;
|&#x2611;
|&#x2611;

|Spring
|&#x2610;
|&#x2611;
|&#x2611;

|CDI
|&#x2610;
|&#x2611;
|&#x2610;
|===

== Build

=== Maven build

The Maven war packaging is a convenient way for building a web application with Maven.

Juzu also provides a set of predefined _war_ that can be reused for simplifying the building of a web application:

* +org.juzu:juzu-dep-guice:war+
* +org.juzu:juzu-dep-spring:war+
* +org.juzu:juzu-dep-servlet-cdi:war+

NOTE: in the following examples we don't need to depend on the Groovy jar as it is a compile dependency of
org.juzu:juzu-core artifact

Let's study a few examples!

==== Example 1: Spring in a Servlet Container

[source,xml]
.Maven dependencies
----
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-core</artifactId>
</dependency>
<dependency>
  <groupId>javax.inject</groupId>
  <artifactId>javax.inject</artifactId>
</dependency>
<dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-core</artifactId>
</dependency>
<dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-beans</artifactId>
</dependency>
<dependency>
  <groupId>org.springframework</groupId>
  <artifactId>spring-web</artifactId>
</dependency>
----

With the war overlay, it becomes:

[source,xml]
.Maven dependencies using the war overlay
----
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-core</artifactId>
</dependency>
<dependency>
  <groupId>javax.inject</groupId>
  <artifactId>javax.inject</artifactId>
</dependency>
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-dep-spring</artifactId>
  <type>war</type>
</dependency>
----

==== Example 2: CDI in a EE Container

[source,xml]
----
<dependency>
  <groupId>org.juzu</groupId>
  <artifactId>juzu-core</artifactId>
</dependency>
<dependency>
  <groupId>javax.inject</groupId>
  <artifactId>javax.inject</artifactId>
  <scope>provided</scope>
</dependency>
----

NOTE: no need to use an overlay for CDI in a EE container

==== Example 3: CDI in a Servlet Container

Using CDI in a Servlet Container is a special case because there is the need for extra configuration of the web application
for CDI. The following example reconfigures the overlay to include the files in the _META-INF_ of the overlay as
 it contains a _context.xml_ file for Tomcat that configures CDI, unfortunately this is quite verbose.

[source,xml]
.Maven dependencies using the war overlay
----
<build>
  <pluginManagement>
    <plugins>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <executions>
          <execution>
            <id>default-war</id>
            <configuration>
              <overlays>
                <overlay>
                  <groupId>org.juzu</groupId>
                  <artifactId>juzu-dep-servlet-cdi</artifactId>
                  <excludes>
                    <exclude>META-INF/maven/org.juzu/juzu-dep-servlet-cdi/**</exclude>
                  </excludes>
                </overlay>
              </overlays>
            </configuration>
            <goals>
              <goal>war</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </pluginManagement>
</build>
<dependencies>
  <dependency>
    <groupId>org.juzu</groupId>
    <artifactId>juzu-core</artifactId>
  </dependency>
  <dependency>
    <groupId>javax.inject</groupId>
    <artifactId>javax.inject</artifactId>
  </dependency>
  <dependency>
    <groupId>org.juzu</groupId>
    <artifactId>juzu-dep-servlet-cdi</artifactId>
    <type>war</type>
  </dependency>
</dependencies>
----

==== Juzu archetype

The following creates a base Juzu application for Tomcat with the Guice injection container:

.Generating an application for the Tomcat server and the Guice injection container
[subs="attributes,specialcharacters"]
----
mvn archetype:generate \\
   -DarchetypeGroupId=org.juzu \\
   -DarchetypeArtifactId=juzu-archetype \\
   -DarchetypeVersion={juzu-version} \\
   -DgroupId=org.example \\
   -DartifactId=myapp \\
   -DpackageName=org.example.myapp \\
   -Dversion=1.0.0-SNAPSHOT
----

The generated application is a quickstart ready to can be customzed for developing more complex applications.
The archetype uses the packager described in the previous section.

It is possible to generate the application for a different server and injection container:

.Generating an application for the Tomcat server and the Spring injection container
[subs="attributes,specialcharacters"]
----
mvn archetype:generate \\
   -DarchetypeGroupId=org.juzu \\
   -DarchetypeArtifactId=juzu-archetype \\
   -DarchetypeVersion={juzu-version} \\
   -DgroupId=org.example \\
   -DartifactId=myapp \\
   -DpackageName=org.example.myapp \\
   -Dversion=1.0.0-SNAPSHOT \\
   -DjuzuServer=tomcat \\
   -DjuzuInject=spring
----

=== Using a prepackaged application

The Juzu distribution contains the Booking and Tutorial applications for GateIn and Liferay servers. They can be used
as basis to create applications.

=== Using an IDE

Juzu uses Annotation Processing Tool to perform many tasks at compilation time. APT is a standard extension of a Java compiler.
All Java IDE (Eclipse, Intellij and Netbeans) provide good support for APT, we will show in the section how to configure
and uses APT within those IDEs.

IDEs provide also Maven support, we will focus in this section on using APT without the Maven support. Indeed the APT support
may work differently when using Maven in your project, the Maven and APT support within IDEs has a dedicated section.

==== Intellij support

todo

==== Eclipse support

todo

==== Netbeans support

todo

== Deploy

At the moment the supported (i.e tested) portal servers are

* Tomcat 6.x and 7.x
* GateIn 3.2 / 3.3 / 3.4 and 3.5
* Liferay 6.1

Other server may work but we are not aware of that as it was not tested in other environments.

=== Tomcat

No specific deployment instruction.

=== GateIn

==== GateIn on Tomcat 6/7

No specific deployment instruction.

==== GateIn on JBoss AS 7

GateIn on JBoss AS7 requires a little modification to do:

Open the file _modules/javax/api/main/module.xml_ and add _<path name="javax/annotation/processing"/>_ among the _paths_
declaration:

[source,xml]
----
<module xmlns="urn:jboss:module:1.1" name="javax.api">
  <dependencies>
    <system export="true">
      <paths>
        <path name="javax/annotation/processing"/>
        ...
      </paths>
    </system>
  </dependencies>
</module>
----

This configuration exposes the +javax.annotation.processing+ package to the classes seen by Juzu.

=== Liferay

Liferay has been tested extensively with the Tomcat version, no specific deployment instruction is required.

== Run

=== Run modes

Juzu defines three modes for running an application, called _run modes_:

* Production (_prod_): error reporting is minimal
* Development (_dev_): provides verbose error reporting
* Live (_live_): allow to develop the application live with verbose error reporting

=== How to choose the right run mode

* When you are running an application use the _prod_ run mode
* When you are developing an application with a build system use the _dev_ run mode
* When you are live developing an application use the _live_ run mode

=== Configuring the run mode

Run mode is configured via servlet context parameters, by default the _prod_ mode is enabled:

* _juzu.run_mode_ : possible values _prod_, _dev_ or _live_
* _juzu.src_path_ : the source path of the source to compile for the live mode

.Configuring the dev mode in web.xml
[source,xml]
----
<context-param>
  <param-name>juzu.run_mode</param-name>
  <param-value>dev</param-value>
</context-param>
----
