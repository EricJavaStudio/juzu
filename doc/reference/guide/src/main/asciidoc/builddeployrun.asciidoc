We will study in this chapter how to build and deploy a Juzu application.

== Introduction

Building a Juzu application is usually done in two steps:

* Compile the application to classes
* Package the application as a web application (_war_ file)

Compiling an application requires a few jars to be present on the compilation classpath:

* The Juzu core jar for the Juzu API
* The JSR-330 jar for the @Inject API
* Any Juzu extension jar such as plugins or additional template engines

After compilation, the compiled classes are packaged as a web application archive (_war_) and then deployed in a server. We
will show several ways to package your Juzu application.

== Juzu dependencies

Let's start by looking at the dependencies required by Juzu, there are several types of dependencies:

* compilation time dependencies used during the compilation of the application: for instance the Less plugin
 transforms a _less_ file into a _css_
* runtime dependencies used when the application is running
** provided by server like the _@Inject_ jar provided by an EE server but not by a Servlet Container
** embedded in the application like Groovy

=== Juzu core dependendencies

Juzu is built on top of a plugin architecture allowing to reduce the number of dependencies to the minimum for the core
of the framework.

.Juzu core dependencies
[cols="5*^",options="header"]
|===
|
|GAV
|Compilation
|Servlet Container
|Java EE Server

|Juzu
|org.juzu:juzu-core
|&#x2611;
|&#x2611;
|&#x2611;

|Groovy
|org.codehaus.groovy:groovy-all
|&#x2610;
|&#x2611;
|&#x2611;

|@Inject
|javax.inject:javax.inject
|&#x2611;
|&#x2611;
|&#x2610;
|===

=== Injection Container dependendencies

Juzu leverages an Injection Container (IOC) at runtime for wiring the various objects managed by the framework. Several
implementations can be used and you should configure the correct dependencies according to the container you are using:

* _Spring 3_
* _Google Guice 3_
* Context and Dependency Injection
** _CDI_ provided by the server
** _Weld_ the CDI implementation managed by Juzu

NOTE: _Context and Dependency Injection_ specification is an extension (JSR 299) of the _@Inject_ specification (JSR-330)

These implementation jars are never required at compilation time, unless you use specific classes in your project, such
as the +@Autowire+ annotation of Spring, or the +@Produces+ annotation of CDI.

At runtime the jars you needs depends on the implementation you use:

.IOC dependencies
[cols="3*^",options="header"]
|===
|
|Servlet Container
|Java EE Server

|Spring
|&#x2611;
|&#x2611;

|Google Guice
|&#x2611;
|&#x2611;

|Weld
|&#x2611;
|&#x2610;

|CDI
|&#x2611;
|&#x2610;
|===

NOTE: When using CDI with a Servlet Container, you need to chose an implementation of CDI and configure it
specifically for the Servlet Container, for instance you can configure
http://docs.jboss.org/weld/reference/1.0.0/en-US/html/environments.html#d0e4998[the Weld implementation for Tomcat 7].

== Packaging a Juzu application

Packaging a Juzu application is quite easy to achieve when you know which dependencies Juzu and the runtime expect
or provide. Juzu jars are deployed in the http://search.maven.org/[Maven Central repository].

When packaging your application you can follow:

[cols="4*^",options="header"]
|===
|
|Compilation
|Servlet Container
|EE Container

|+org.juzu:juzu-core+
|&#x2611;
|&#x2611;
|&#x2611;

|+org.codehaus.groovy:groovy-all+
|&#x2611;
|&#x2611;
|&#x2611;

|+javax.inject:javax.inject+
|&#x2611;
|&#x2611;
|&#x2610;

|Guice
|&#x2610;
|&#x2611;
|&#x2611;

|Spring
|&#x2610;
|&#x2611;
|&#x2611;

|CDI
|&#x2610;
|&#x2611;
|&#x2610;
|===

== Build

Every Juzu application is just a web application, any build system or IDE cab achieve it easily. We are going to
cover the cases of Maven and Gradle builds as well as a few IDEs.

=== Build with Maven

The Maven war packaging is a convenient way for building a web application with Maven. In the following examples we
will show the Maven configuration for a couple of examples, all the configurations are listed in the appendix of this guide:

* <<servlet_guice>>
* <<servlet_spring>>
* <<servlet_cdi>>
* <<ee_guice>>
* <<ee_spring>>
* <<ee_cdi>>
* <<gatein_guice>>
* <<gatein_spring>>
* <<gatein_cdi>>

NOTE: we don't need to depend on the Groovy jar as it is a compile dependency of
org.juzu:juzu-core artifact and it will be present thanks to dependencies transitivity

==== Example 1: Spring in a Servlet Container

[source,xml,indent=0]
.Maven dependencies for Spring in a servlet container
----
include::{sourcesdir}/META-INF/maven/org.juzu/juzu-booking/pom.xml[tags=spring]
----

==== Example 2: CDI

_CDI_ is supported natively by an _EE_ container and requires specific integration for a servlet container like _tomcat_

===== CDI for an EE container

Here are the dependencies for an EE container.

[source,xml,indent=0]
.Maven dependencies for CDI in an EE container
----
include::{sourcesdir}/META-INF/maven/org.juzu/juzu-booking/pom.xml[tags=ee-cdi]
----

===== CDI for a Servlet container

Using CDI with the Weld reference implementation in a Servlet Container requires  extra configuration of the web application
described in the http://docs.jboss.org/weld/reference/1.0.0/en-US/html/environments.html#d0e4998[Weld manuel], let's look
 first at the jar dependencies

[source,xml,indent=0]
.Maven dependencies for CDI in a servlet container
----
include::{sourcesdir}/META-INF/maven/org.juzu/juzu-booking/pom.xml[tags=cdi]
----

We need specific elements in _web.xml_ for integrating CDI with a servlet container:

[source,xml,indent=0]
.Servlet container configuration for CDI
----
<listener>
  <listener-class>org.jboss.weld.environment.servlet.Listener</listener-class>
</listener>
<resource-env-ref>
  <resource-env-ref-name>BeanManager</resource-env-ref-name>
  <resource-env-ref-type>javax.enterprise.inject.spi.BeanManager</resource-env-ref-type>
</resource-env-ref>
----

In addition we need also a _META-INF/context.xml_ file that contains specific Tomcat configuration:

[source,xml,indent=0]
.Maven Tomcat context.xml configuration
----
include::{sourcesdir}/META-INF/context.xml[]
----

==== Juzu archetype

The following creates a base Juzu application for Tomcat with the Guice injection container:

.Generating an application for the Tomcat server and the Guice injection container
[subs="attributes,specialcharacters"]
----
mvn archetype:generate \
   -DarchetypeGroupId=org.juzu \
   -DarchetypeArtifactId=juzu-archetype \
   -DarchetypeVersion={juzu-version} \
   -DgroupId=org.example \
   -DartifactId=myapp \
   -DpackageName=org.example.myapp \
   -Dversion=1.0.0-SNAPSHOT
----

The generated application is a quickstart ready to can be customized for developing more complex applications.

It is possible to generate the application for a different server and injection container:

.Generating an application for the Tomcat server and the Spring injection container
[subs="attributes,specialcharacters"]
----
mvn archetype:generate \
   -DarchetypeGroupId=org.juzu \
   -DarchetypeArtifactId=juzu-archetype \
   -DarchetypeVersion={juzu-version} \
   -DgroupId=org.example \
   -DartifactId=myapp \
   -DpackageName=org.example.myapp \
   -Dversion=1.0.0-SNAPSHOT \
   -DjuzuServer=servlet \
   -DjuzuInject=spring
----

Valid _juzuServer_ values are _servlet_, _ee_ or _gatein_.
Valid _juzuInject_ values are _guice_, _spring_ or _cdi_.

=== Build with Gradle

Building a Juzu application with Gradle is very easy with the _war_ Gradle plugin, here is an example of _build.gradle_ file:

.Building an application with Gradle
[subs="attributes,specialcharacters"]
----
apply plugin: 'war'
repositories {
  mavenCentral()
}
dependencies {
  compile group: 'org.juzu', name: 'juzu-core', version: '{juzu-version}'
  compile group: 'org.juzu', name: 'juzu-plugins-servlet', version: '{juzu-version}'
  compile group: 'javax.inject', name: 'javax.inject', version: '{inject-version}'
  providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '{servlet-version}'
  runtime group: 'org.springframework', name: 'spring-web', version: '{spring-version}'
}
----

=== Eclipse support

Eclipse IDE provides the best support for annotation processing among all IDEs. Annotation processing is integrated
natively at the heart of Eclipse incremental compiler providing an high level of interaction between the developer
and its project.

In this section we will see how to import the Maven based Juzu sample in Eclipse and configure it for annotation processing.

==== Importing the Maven project

Let's first import our Maven application in Eclipse.

.Click the Import from the File menu and then chose Maven/Existing Maven Project
image::images/builddeployrun/eclipse01.png[Interactions,500,align="center"]

.Complete the import
image::images/builddeployrun/eclipse02.png[Interactions,500,align="center"]

At this point the project should be imported in Eclipse.

==== Compiler configuration

Now we need to configure annotation processing in the compiler configuration.

.Edit the project properties
image::images/builddeployrun/eclipse03.png[Interactions,300,align="center"]

.In the Java Compiler tab configure the Annotation Processing
image::images/builddeployrun/eclipse04.png[Interactions,600,align="center"]

Set the generated source directory to _target/generated-sources/annotations_ to share it with the Maven build.

.In the same tab edit the Factory Path
image::images/builddeployrun/eclipse05.png[Interactions,600,align="center"]

Enable the project specific settings and add the Juzu core jar by clicking on _Add Variable..._

.Pick M2_REPO
image::images/builddeployrun/eclipse06.png[Interactions,550,align="center"]

Then click on _Extend..._

.In the Variable Extension select the juzu-core jar in the hierarchy
image::images/builddeployrun/eclipse07.png[Interactions,450,align="center"]

.Eclipse is now configured to use our processor
image::images/builddeployrun/eclipse08.png[Interactions,600,align="center"]

.Don't forget to build the project automatically
image::images/builddeployrun/eclipse09.png[Interactions,250,align="center"]

==== Processing annotations

Our project is now properly configured

.Eclipse is now configured to use our processor
image::images/builddeployrun/eclipse10.png[Interactions,300,align="center"]

The _target/generated-sources/annotations_ is now recognized by Eclipse as a source folder.

.The controller
image::images/builddeployrun/eclipse11.png[Interactions,600,align="center"]

Let's add a process controller method

.Controller_ is updated
image::images/builddeployrun/eclipse12.png[Interactions,600,align="center"]

Eclipse will update the +Controller_+ class transparently just after we save the +Controller+ class.

==== Maven m2e-apt plugin

If you want to make your life easier you can install the _m2e-apt_ plugin, this plugin will automatically configure
the Eclipse project as we have seen before.

NOTE: installing this plugin is optional, it is however nice to use with annotation processing

.Install the plugin in the Install panel
image::images/builddeployrun/eclipse13.png[Interactions,600,align="center"]

You can get this plugin by adding http://download.jboss.org/jbosstools/updates/m2e-extensions/m2e-apt in the Install
panel.

.Configuration of the m2e-apt plugin
image::images/builddeployrun/eclipse14.png[Interactions,600,align="center"]

=== Intellij support

Juzu uses Annotation Processing Tool to perform many tasks at compilation time. APT is a standard extension of a Java compiler.
All Java IDE (Eclipse, Intellij and Netbeans) provide good support for APT, we will show in the section how to configure
and uses APT within those IDEs.

IDEs provide also Maven support, we will focus in this section on using APT without the Maven support. Indeed the APT support
may work differently when using Maven in your project, the Maven and APT support within IDEs has a dedicated section.


In this Intellij walkthrough we will work with project called _myapp_ that was created by the Juzu Maven archetype.

==== Importing the Maven project

Let's first import our Maven project in Intellij.

.Click the Import Project from the Quick Start screen
image::images/builddeployrun/intellij01.png[Interactions,700,align="center"]

.Select the pom.xml file of our myapp project
image::images/builddeployrun/intellij02.png[Interactions,400,align="center"]

.The project view after import
image::images/builddeployrun/intellij03.png[Interactions,400,align="center"]

We can see in the _target_ directory the generated annotations folders, it contains several classes generated
by Juzu such as +Application+ or +Controller_+ but also other files like templates

.The imported project structure
image::images/builddeployrun/intellij04.png[Interactions,700,align="center"]

The generated annotations folders should be visible from the project.

TIP: you should build the project before importing it, this will help Intellij to detect the
_target/generated-sources/annotations_ and _target/generated-sources/test-annotations_ folder and configure
those as source folders of the project. If you don't do that then you will have to do it manually in the
_Project Structure_ screen. In the screenshot we can see that all folders of _target_ have been excluded
except the generated annotations sources.

==== Compiler configuration

Integration of Juzu in your IDE requires to properly configure and activate the Java compiler for using the
Juzu annotation processor.

.Java compiler configuration
image::images/builddeployrun/intellij05.png[Interactions,700,align="center"]

Java compiler configures requires to *disable* the _external build_ feature that does not support annotation
processing.

.Annotation processor configuration
image::images/builddeployrun/intellij06.png[Interactions,700,align="center"]

After that, the Juzu annotation processor shall be http://www.jetbrains.com/idea/webhelp/configuring-annotation-processing.html[configured] to +juzu.processor.MainProcessor+.

==== Processing annotations

When using annotation processing it is important to keep your generated sources in sync with your code. There are two
ways to achieve it in our case:
- let Maven do the job for you either via the IDE integration or command line
- ask Intellij to process the sources

In this part we are going to study how annotation generation work within the IDE with the +Controller+ class. The
controller compagnion +Controller+ looks like after the initial generation:

.The Controller_ generated class
image::images/builddeployrun/intellij08.png[Interactions,600,align="center"]

Let's add a new controller method +process+ in our controller.

.The modified controller
image::images/builddeployrun/intellij10.png[Interactions,600,align="center"]

Now let's generate the new source code via the IDE.

.Processing annotations
image::images/builddeployrun/intellij09.png[Interactions,400,align="center"]

After generate our +Controller+ class has been updated.

.The updated Controller_ class
image::images/builddeployrun/intellij11.png[Interactions,600,align="center"]

We can see that a new +method_1+ field in +Controller_+ reflects the +process+ method we added in +Controller+.

=== Netbeans support

todo

== Run

=== Run modes

Juzu defines three modes for running an application, called _run modes_:

* Production (_prod_): error reporting is minimal
* Development (_dev_): provides verbose error reporting
* Live (_live_): allow to develop the application live with verbose error reporting. It provides a live recompilation of
the sources at runtime providing an increased productivity.

Run mode is configured via the servlet context parameters for Servlet or Portlet applications this the scope
 of the run mode is for the entire bridge.

.Configuring the dev mode in web.xml
[source,xml]
----
<context-param>
  <param-name>juzu.run_mode</param-name>
  <param-value>dev</param-value>
</context-param>
----

NOTE: live mode is experimental and you may experience issues when using it. When this happens recompile your application
with your build system and redeploy it, this will reinitialize the runtime and you can use live mode again.