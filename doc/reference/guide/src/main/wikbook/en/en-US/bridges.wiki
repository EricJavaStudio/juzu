The bridge is the runtime in which Juzu executes, until now Juzu provides two bridges:

* The servlet bridge executes a Juzu application in a servlet container like Tomcat
* The portlet bridge executes a Juzu application in a portlet container inside a portal

= Servlet bridge =

The servlet bridge exposes a Juzu application as a servlet in a Servlet Container.

== Juzu servlet ==

The first step for using the servlet bridge is to configure the ##juzu.bridge.servlet.JuzuServlet## servlet for
the application. There is a one to one mapping between a Juzu application and a Juzu servlet. Therefore
if you project contains several applications, you should configure a Juzu servlet for each.

=== Servlet configuration ===

Declaring a Juzu servlet is done in the //web.xml// file of the web application:

{{example title='The Juzu servlet configuration'}}
{{xml}}
<servlet>
  <servlet-name>JuzuServlet</servlet-name>
  <servlet-class>juzu.bridge.servlet.JuzuServlet</servlet-class>
  <init-param>
    <param-name>juzu.app_name></param-name>
    <param-value>my.application</param-value>
  </init-param>
</servlet>
<servlet-mapping>
  <servlet-name>JuzuServlet</servlet-name>
  <url-pattern>/</url-pattern>
</servlet-mapping>
{{/xml}}
{{/example}}

The //juzu.app_name// init parameter tells Juzu the package of the application to use. The servlet is bound
on the ///// pattern as the default servlet of the web application.

In case of several applications, each can be configured with a //path mapping// in addition of the default servlet:

{{example title='Path mapping configuration'}}
{{xml}}
<servlet-mapping>
  <servlet-name>JuzuServlet</servlet-name>
  <url-pattern>/myapplication/*</url-pattern>
</servlet-mapping>
{{/xml}}
{{/example}}

{{warning}}Any other kind of //url-pattern// than the default servlet (/////) or path mapping is not supported
and will raise an error during startup{{/warning}}

=== Servlet generation ===

In the previous section we showed how to configuration the Juzu servlet. Since Servlet 3.0, it is possible to
annotate a servlet to configure one. Juzu leverages this capability and is able to generate a servlet for an
application with the ##juzu.plugin.servlet.Servlet## annotation:

{{example title='Juzu servlet generation'}}
{{java}}
@Application
@Servlet("/")
package my.application;
{{/java}}
{{/example}}

= Portlet bridge =

The portlet bridge exposes a Juzu application as a portlet in a Portlet Container.

== Juzu portlet ==

The first step for using the portlet bridge is to configure the ##juzu.bridge.portlet.JuzuPortlet## portlet for
the application. There is a one to one mapping between a Juzu application and a Juzu portlet. Therefore
if you project contains several applications, you should configure a Juzu portlet for each.

=== Portlet configuration ===

Declaring a Juzu portlet is done in the //portlet.xml// file of the portlet application:

{{example title='The Juzu portlet configuration'}}
{{xml}}
<portlet>
  <portlet-name>JuzuPortlet</portlet-name>
  <display-name xml:lang="EN">Juzu Portlet Application</display-name>
  <portlet-class>juzu.bridge.portlet.PortletBridge</portlet-class>
  <init-param>
    <param-name>juzu.app_name></param-name>
    <param-value>my.application</param-value>
  </init-param>
  <supports>
    <mime-type>text/html</mime-type>
  </supports>
  <portlet-info>
    <title>Portlet Application</title>
  </portlet-info>
</portlet>
{{/xml}}
{{/example}}

The //juzu.app_name// init parameter tells Juzu the package of the application to use.
