Web assets are resources used over the web such as stylesheet and script files. Using an asset is done in two steps:

* declare the asset
* serve the asset

= Asset plugin =

The asset plugin provides declarative asset configuration. The ##@Assets## annotation declares a list of assets used by
the an application.

{{example title="JQuery UI declarative asset configuration"}}
{{java}}
@Assets({
  @Asset(id = "jquery", value = "javascripts/jquery-1.7.1.min.js"), // <1> Declares the //jQuery// asset
  @Asset(id = "jquery-ui.css", value = "ui-lightness/jquery-ui-1.7.2.custom.css"), // <2> Declare the //jQuery-UI// stylesheet asset
  @Asset(value = "javascripts/jquery-ui-1.7.2.custom.min.js", // <3> Declares the //jQuery-UI// asset
         depends = {"jquery", "jquery-ui.css"}) // <4> depends on ##jquery## and ##jquery-ui.css## assets
  }}
)
package my.application;
{{/java}}
{{/example}}

= Asset declaration =

Assets are declared and used by the application with the following attributes:

* an //id// to reference it within the application
* a //location// and //source// for resolving the asset file
* a list of //dependencies// referencing other assets that are needed by the asset

For example, the //jQuery-UI// plugin could be identified by //jquery-ui// with the dependency onto the //jquery// js asset and
the //jQuery-UI// stylesheet. Its physical location would be the ##asset## package with the ##jquery-ui-1.4.2.min.js## name.

== Asset id ==

The asset id must be unique within the application, this value is however optional. When no id is declared, the asset value
is used for creating an id from the asset file name:

* The value ##jquery-ui-1.7.2.custom.min.js## produces the same ##jquery-ui-1.7.2.custom.min.js## value
* The value ##js/jquery-ui-1.7.2.custom.min.js## produces the ##jquery-ui-1.7.2.custom.min.js##  value

== Application assets ==

Applications assets can be located anywhere on the application classpath, they can be either absolute or relatives. Relative
assets declared by the asset plugin must be located in the ##assets## package of the application, for instance
an application packaged under ##my.application## will have its relative assets located under ##my.application.assets##.

{{example title="Declarative relative application asset configuration"}}
{{java}}
@Assets(@Asset("myscript.js"))
package my.application;
{{/java}}
{{/example}}

The location ##AssetLocation.APPLICATION## is not declared because it is the default one.

== Server assets ==

Server assets are served by the webserver in which the application is deployed. Relative server assets are served from
the war file containing the application.

{{example title="Declarative relative server asset configuration"}}
{{java}}
@Assets(@Asset(value = "myscript.js", location = AssetLocation.SERVER))
package my.application;
{{/java}}
{{/example}}

== External assets ==

External assets declares an opaque URL for Juzu.

{{example title="External classpath asset configuration"}}
{{java}}
@Assets(@Asset(
  value = "https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js",
  location = AssetLocation.URL))
package my.application;
{{/java}}
{{/example}}

= Asset serving =

During a request, asset identifiers are added to the response. At the end of the request, Juzu translates the assets into
a list of uri to add to the page.

[[image:images/assets/assets1.png||title="Using assets in a request" align="center" html:scale="100" fo:width="100mm]]

An asset reference is a link to an asset value that is configured externally, thus an asset of any kind will always resolve
to a location and an uri. Let's examine the different possible asset location:

* ##AssetLocation.URL##: the value is opaque to Juzu, for instance the a CDN hosted script such as //https:\/\/ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js//.
* ##AssetLocation.SERVER##: the asset is served by the same web server in which Juzu is deployed. If the asset value is relative, the final uri will
resolve relatively to the web archive context address.
* ##AssetLocation.APPLICATION##: the asset is served by Juzu //asset server// (a servlet configured in the web application) and the resource is located
 on the classpath.

Asset serving can either be done declaratively with the ##@WithAssets## annotation or with methods of the ##juzu.Response.Content##
class.

== Declarative asset serving ==

The ##WithAssets## annotation tells Juzu to add an asset to a content response, it takes asset ids as arguments:

{{example title="Serve jQuery and Twitter Bootstrap with the application index page"}}
{{java}}
@WithAssets("jquery", "bootstrap")
@View
public Response.Content index() {
  ...
}
{{/java}}
{{/example}}

The annotation can be declared on //controller methods//, //classes// or //packages//. When the declaration occurs on
classes or packages, the declaration is //cascaded// on the nested controller.

The annotation can also be used with the ##*## pattern, matching all application declared assets, which is equivalent
to use the ##@WithAssets## annotation without parameters as ##*## is this annotation default value.

{{tip}}
Annotating the application package with ###WithAsset## will serve all assets declared in the application for all controllers.
If you need finer grained serving, remove it and use it on controller directly.
{{/tip}}

== Dynamic asset serving ==

Asset serving can be achieved programmatically when the application does not know the assets to serve at compilation
time:

{{example title="Serve //jQuery// and //Twitter Bootstrap// with the application index"}}
{{java}}
@View
public Response.Content index() {
  ...
  return content.withAssets("jquery", "bootstrap");
}
{{/java}}
{{/example}}

The ##withAssets## method does exactly the same job than the ##WithAssets## annotation.

{{note}}The ##@WithAssets## annotation and the ##withAssets## method are cumulative.{{/note}}

= Asset server =

For serving classpath assets, Juzu requires the configuration of the asset server as a servlet declaration:

{{xml}}
<servlet>
  <servlet-name>AssetServlet</servlet-name>
  <servlet-class>juzu.impl.asset.AssetServlet</servlet-class>
  <load-on-startup>0</load-on-startup>
</servlet>
<servlet-mapping>
  <servlet-name>AssetServlet</servlet-name>
  <url-pattern>/assets/*</url-pattern>
</servlet-mapping>
{{/xml}}

This declaration should be in the //web.xml// of the application whether it is a servlet or a portlet application.

{{note}}If you are using Servlet 3.0, this declaration is not necessary.{{/note}}

= Asset manager =

When an application is deployed, assets are registered against the //asset manager//. The asset manager has several
 responsibilities:

* manage asset dependencies: the order in which assets are literaly declared when they are served. For instance
the //jquery-ui// asset depends on the //jquery// asset because the jquery script must be loaded before the //jquery-ui//
script.
* resolve asset references: each asset reference must be resolved and produce a final web url that will produce the resource
 when it is resolved by the web browsers
